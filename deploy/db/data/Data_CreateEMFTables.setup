-- emissions.versions
CREATE TABLE emissions.versions
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL,
  version int4 NOT NULL,
  name varchar(255) NOT NULL,
  path text NULL DEFAULT ''::text,
  final_version bool NOT NULL DEFAULT false,
  date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  lock_owner varchar(255),  
  lock_date timestamp,
  UNIQUE (dataset_id, version),
  UNIQUE (dataset_id, name)
) 
WITHOUT OIDS;
--emissions.versions
--

-- emf.users
CREATE TABLE emf.users
(
  id SERIAL PRIMARY KEY,
  username varchar(255) NOT NULL UNIQUE,
  password varchar(255) NOT NULL,
  name varchar(255) NOT NULL,
  affiliation varchar(255) NOT NULL,
  phone varchar(15) NOT NULL,
  email varchar(255) NOT NULL,
  is_admin bool NOT NULL DEFAULT false,
  is_account_disabled bool NOT NULL DEFAULT false,
  lock_owner varchar(255),  
  lock_date timestamp
) 
WITHOUT OIDS;
-- emf.users
--
-- emf.note_types
CREATE TABLE emf.note_types
(
  id SERIAL PRIMARY KEY,
  type varchar(30) NOT NULL,
  UNIQUE (type)
)
WITHOUT OIDS;
-- emf.note_types
--
-- emf intended_uses
CREATE TABLE emf.intended_uses
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
-- emf intended_uses
--
-- emf projects
CREATE TABLE emf.projects
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
-- emf projects
--
-- emf.countries
CREATE TABLE emf.countries
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
-- emf.countries
--
-- emf.sector
CREATE TABLE emf.sectors
(
  id SERIAL PRIMARY KEY,
  name varchar(255) UNIQUE NOT NULL,
  description text,
  lock_owner varchar(255),
  lock_date timestamp
) 
WITHOUT OIDS;
-- emf.sector
--
-- emf regions
CREATE TABLE emf.regions
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
-- emf regions
--
-- emf.sectorcriteria
CREATE TABLE emf.sector_criteria
(
  id SERIAL PRIMARY KEY,
  sector_id int4 NOT NULL REFERENCES emf.sectors (id),
  list_index int4,
  "type" varchar(255) NOT NULL,
  criteria text
) 
WITHOUT OIDS;
-- emf.sector_criteria
--
--emf.status
CREATE TABLE emf.status
(
  id SERIAL PRIMARY KEY,
  username varchar(255) NOT NULL REFERENCES emf.users (username),
  type varchar(255) NOT NULL,
  message text NOT NULL,
  is_read bool NOT NULL DEFAULT false,
  date timestamp NOT NULL
) 
WITHOUT OIDS;
--emf.status
--
--emf.properties
CREATE TABLE emf.properties
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE,
  value varchar(255) NOT NULL
) 
WITHOUT OIDS;
--emf.properties
--
-- emf.dataset_types
CREATE TABLE emf.dataset_types
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE,
  description text NOT NULL,
  min_files int4 NOT NULL DEFAULT 1,
  max_files int4 NOT NULL DEFAULT 1,
  "external" bool NOT NULL DEFAULT false,
  default_sortorder text NULL DEFAULT '',
  importer_classname varchar(255),
  exporter_classname varchar(255),
  lock_owner varchar(255),
  lock_date timestamp,
  table_per_dataset int4 NOT NULL DEFAULT 1
) 
WITHOUT OIDS;
-- emf.dataset_types
--
-- emf.datasets
CREATE TABLE emf.datasets
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE,
  creator varchar(255) NOT NULL REFERENCES emf.users (username),
  status varchar(255),
  dataset_type int4 REFERENCES emf.dataset_types (id),
  units varchar(255),
  region int4 REFERENCES emf.regions (id),
  intended_use int4 REFERENCES emf.intended_uses (id),
  "year" int4 NOT NULL DEFAULT 0,
  country int4 REFERENCES emf.countries (id),
  temporal_resolution varchar(255),
  start_date_time timestamp,
  stop_date_time timestamp,
  description text,
  project int4 REFERENCES emf.projects (id),
  created_date_time timestamp,
  modified_date_time timestamp,
  accessed_date_time timestamp,
  default_version int4 DEFAULT 0,
  lock_owner varchar(255),
  lock_date timestamp
) 
WITHOUT OIDS;
--
--
--emf.dataset_access_logs
CREATE TABLE emf.dataset_access_logs
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 REFERENCES emf.datasets (id) NOT NULL,
  lines_exported int8 DEFAULT 0,
  username varchar(255) REFERENCES emf.users (username) NOT NULL,
  dataset_name varchar(255),
  date timestamp NOT NULL,
  end_date timestamp,
  time_reqrd real DEFAULT 0,
  version varchar(255) NOT NULL,
  description text NOT NULL,
  "location" varchar(255) NOT NULL,
  details text
) 
WITHOUT OIDS;
--emf.dataset_access_logs
--
--emf.notes
CREATE TABLE emf.notes
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL,
  creator int4 NOT NULL REFERENCES emf.users(id),
  date_time timestamp,
  type int4 NOT NULL REFERENCES emf.note_types(id),
  details text NOT NULL,
  refers_notes text,
  UNIQUE (name)
) 
WITHOUT OIDS;
--emf.notes
--
-- emf.revisions
CREATE TABLE emf.revisions
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL REFERENCES emf.datasets (id), 
  version int4 NOT NULL,
  creator int4 NOT NULL REFERENCES emf.users(id),
  date_time timestamp,
  what text NOT NULL,
  why text NOT NULL,
  refers_notes text
) 
WITHOUT OIDS;
-- emf.revisions
--
-- emf ... KEYWORDS framework
CREATE TABLE emf.keywords
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
--
CREATE TABLE emf.dataset_types_keywords
(
  id SERIAL PRIMARY KEY,
  dataset_type_id int4 NOT NULL REFERENCES emf.dataset_types(id),
  list_index int4,
  keyword_id int4 NOT NULL REFERENCES emf.keywords (id),
  value varchar(255) NULL,
  UNIQUE (dataset_type_id, keyword_id)
) 
WITHOUT OIDS;
--
CREATE TABLE emf.datasets_keywords
(
  id SERIAL PRIMARY KEY,
  list_index int4,
  dataset_id int4 NOT NULL REFERENCES emf.datasets (id), 
  keyword_id int4 NOT NULL REFERENCES emf.keywords (id), 
  value varchar(255) NOT NULL,
  UNIQUE (dataset_id, keyword_id)
) 
WITHOUT OIDS;
-- emf datasets_keywords
--
-- emf internal and external sources
CREATE TABLE emf.external_sources
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL REFERENCES emf.datasets(id),
  list_index int4,
  datasource varchar(255) NOT NULL,
  UNIQUE (dataset_id, datasource)
) 
WITHOUT OIDS;
--
CREATE TABLE emf.internal_sources
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL REFERENCES emf.datasets(id),
  list_index int4,
  datasource varchar(255) NOT NULL,
  table_name varchar(255) NOT NULL,
  table_type varchar(255) NOT NULL,
  table_columns text NOT NULL,
  file_size int4 NOT NULL, 
  UNIQUE (dataset_id, datasource,table_name)
) 
WITHOUT OIDS;
-- emf internal and external sources
--
-- emf datasets_sectors
CREATE TABLE emf.datasets_sectors
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL REFERENCES emf.datasets (id) ,
  list_index int4,
  sector_id int4 REFERENCES emf.sectors (id) 
) 
WITHOUT OIDS;
-- emf datasets_sectors
-------------------------------------------------------------------------------------------
--emf.qa_programs
CREATE TABLE emf.qa_programs
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE,
  run_classname varchar(100)
) 
WITHOUT OIDS;
-- emf.qa_programs
--

-- emf.dataset_types_qa_step_templates
CREATE TABLE emf.dataset_types_qa_step_templates
(
  id SERIAL PRIMARY KEY,
  dataset_type_id int4 NOT NULL REFERENCES emf.dataset_types(id),
  list_index int4,
  name varchar(255) NOT NULL,
  qa_program_id int4 REFERENCES emf.qa_programs(id),
  program_arguments text,
  required bool,
  order_no real,
  description text,
  UNIQUE (dataset_type_id, name)
) 
WITHOUT OIDS;
-- emf.dataset_types_qa_step_templates
--
-- emf.qa_steps
CREATE TABLE emf.qa_steps
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL REFERENCES emf.datasets(id),
  version int4 NOT NULL,
  name varchar(255) NOT NULL,
  qa_program_id int4 REFERENCES emf.qa_programs(id),
  program_arguments text,
  required bool,
  order_no real,
  who varchar(255),
  date timestamp,
  comments text,
  status varchar(15),
  description text,
  configuration varchar(255),
  output_folder varchar(255),
  UNIQUE (dataset_id, version, name)
) 
WITHOUT OIDS;
-- emf.qa_steps

-- emf.qa_step_results
CREATE TABLE emf.qa_step_results
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL REFERENCES emf.datasets(id),
  version int4 NOT NULL,
  qa_step_id int4 NOT NULL REFERENCES emf.qa_steps(id),
  output_table varchar(255),
  table_creation_status varchar(50),
  table_creation_date timestamp,
  UNIQUE(dataset_id,version,qa_step_id)
) 
WITHOUT OIDS;
-- emf.qa_step_results

-- Table: emf.datasets_notes
CREATE TABLE emf.datasets_notes
(
  id SERIAL PRIMARY KEY,
  dataset_id integer NOT NULL REFERENCES emf.datasets(id),
  version int4 NOT NULL DEFAULT 0,
  note_id integer NOT NULL REFERENCES emf.notes(id),
  UNIQUE(dataset_id, note_id)
) 
WITHOUT OIDS;
-- emf.datasets_notes

-- Table: emf.table_consolidations
CREATE TABLE emf.table_consolidations
(
  id SERIAL PRIMARY KEY,
  dataset_type_id int4 NOT NULL REFERENCES emf.dataset_types(id),
  output_table varchar(64),
  num_col int4 NOT NULL DEFAULT 0,
  col_names text,
  col_types text,
  size_limit real,
  UNIQUE(dataset_type_id, output_table)
) 
WITHOUT OIDS;
-- emf.table_consolidations

-- reference.rsm_inv_sectors
CREATE TABLE reference.rsm_inv_sectors
(
  id SERIAL PRIMARY KEY,
  rsm_sector varchar(255) NOT NULL,
  pollutant varchar(255) NOT NULL,
  inv_sector text NOT NULL
) 
WITHOUT OIDS;
-- reference.rsm_inv_sectors
