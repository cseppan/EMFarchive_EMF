-- TODO: we need to set all line based dataset types to have a default sort order of LINE_NUMBER
-- TODO: we need to set all CSV based dataset types to set keywords EXPORT_INLINE_COMMENTS to false and
--       export_suffix to .csv
-- emf.users
insert into emf.users values(DEFAULT,'admin', '1Ojm3qp7H4OB4J4+a4PjbwtoHFw=', 'EMF Administrator', 'UNC', '919-843-8593', 'admin@emf.cep.unc.edu', TRUE, FALSE);
insert into emf.users values(DEFAULT,'emf', '7Dq/pgn1VOcABL644L59KlfI/eo=', 'EMF User', 'UNC', '919-843-8593', 'emf@emf.cep.unc.edu', FALSE, FALSE);
-- emf.users
-- emf.countries
insert into emf.countries values (DEFAULT, 'Canada');
insert into emf.countries values (DEFAULT, 'Mexico');
insert into emf.countries values (DEFAULT, 'US');
-- emf.countries
--
--emf.sectors
insert into emf.sectors values (DEFAULT, 'Point', 'Point');
insert into emf.sectors values (DEFAULT, 'Nonpoint', 'Nonpoint');
insert into emf.sectors values (DEFAULT, 'Area','Area');
insert into emf.sectors values (DEFAULT, 'Point IPM','Point IPM');
insert into emf.sectors values (DEFAULT, 'Point Non-IPM','Point Non-IPM');
insert into emf.sectors values (DEFAULT, 'Point Fugitive Dust','Point Fugitive Dust');
insert into emf.sectors values (DEFAULT, 'Fire','Fire');
insert into emf.sectors values (DEFAULT, 'Average Fire','Average Fire');
insert into emf.sectors values (DEFAULT, 'Agricultural','Agricultural');
insert into emf.sectors values (DEFAULT, 'Area Fugitive Dust','Area Fugitive Dust');
insert into emf.sectors values (DEFAULT, 'Other Area','Other Area');
insert into emf.sectors values (DEFAULT, 'Nonroad','Nonroad');
insert into emf.sectors values (DEFAULT, 'On Road','On Road');
insert into emf.sectors values (DEFAULT, 'Biogenic','Biogenic');
--emf.sectors

--emf.properties
insert into emf.properties values(DEFAULT, 'lock.time-interval', '7200000');
insert into emf.properties values(DEFAULT, 'page-size', '100');
insert into emf.properties values(DEFAULT, 'batch-size', '10000');
insert into emf.properties values(DEFAULT, 'export-batch-size', '150000');
insert into emf.properties values(DEFAULT, 'defaultQASummaries', 'Summarize by Pollutant|Summarize by SCC and Pollutant|Summarize by County and Pollutant|Summarize by U.S. State and Pollutant');
insert into emf.properties values(DEFAULT, 'PM10-PRI-alias', 'PM10');
insert into emf.properties values(DEFAULT, 'PM2_5-PRI-alias', 'PM2_5');
insert into emf.properties values(DEFAULT, 'ImportExportTempDir', '');
insert into emf.properties values(DEFAULT, 'NUMBER_OF_SIMULT_EXPORTS', '2');
insert into emf.properties values(DEFAULT, 'SECONDS_TO_WAIT_AFTER_EXPORT', '2');
insert into emf.properties values(DEFAULT, 'DO_NOT_EXPORT_JOBS', 'true');
insert into emf.properties values(DEFAULT, 'USE_IMPORT_TASK_MANAGER', 'false');
--update version each time EMF gets updated!
insert into emf.properties values(DEFAULT, 'EMF-version', 'v1.9 - 1/31/2008');
insert into emf.properties values(DEFAULT, 'strategy-pool-size', '2');

--emf.properties
-- DO NOT CHANGE THE ORDER OF THE DATASET TYPE
-- emf.dataset_types
insert into emf.dataset_types values(DEFAULT,'ORL Nonpoint Inventory (ARINV)','ORL Nonpoint Inventory (ARINV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.orl.ORLNonPointImporter', 'gov.epa.emissions.commons.io.orl.ORLNonPointExporter');
insert into emf.dataset_types values(DEFAULT,'ORL Nonroad Inventory (ARINV)','ORL Nonroad Inventory (ARINV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.orl.ORLNonRoadImporter', 'gov.epa.emissions.commons.io.orl.ORLNonRoadExporter');
insert into emf.dataset_types values(DEFAULT,'ORL Onroad Inventory (MBINV)','ORL Onroad Inventory (MBINV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.orl.ORLOnRoadImporter', 'gov.epa.emissions.commons.io.orl.ORLOnRoadExporter');
insert into emf.dataset_types values(DEFAULT,'ORL Point Inventory (PTINV)','ORL Point Inventory (PTINV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.orl.ORLPointImporter', 'gov.epa.emissions.commons.io.orl.ORLPointExporter');
insert into emf.dataset_types values(DEFAULT,'Shapefile (External)','Shapefile (External)', '3', '-1', true,'', 'gov.epa.emissions.commons.io.external.ShapeFilesImporter', 'gov.epa.emissions.commons.io.external.ExternalFilesExporter');
insert into emf.dataset_types values(DEFAULT,'External File (External)','External File (External)', '1', '-1', true,'', 'gov.epa.emissions.commons.io.external.ExternalFilesImporter', 'gov.epa.emissions.commons.io.external.ExternalFilesExporter');
insert into emf.dataset_types values(DEFAULT,'Meteorology File (External)','Meteorology File (External)', '1', '-1', true,'', 'gov.epa.emissions.commons.io.external.MeteorologyFilesImporter', 'gov.epa.emissions.commons.io.external.ExternalFilesExporter');
insert into emf.dataset_types values(DEFAULT,'Model Ready Emissions File (External)','Model Ready Emissions (External)', '1', '-1',true,'', 'gov.epa.emissions.commons.io.external.ModelReadyEmissionsFilesImporter', 'gov.epa.emissions.commons.io.external.ExternalFilesExporter');
insert into emf.dataset_types values(DEFAULT,'Temporal Cross Reference (A/M/PTREF)','Temporal Cross Reference (A/M/PTREF)', '1', '1',false,'', 'gov.epa.emissions.commons.io.temporal.TemporalReferenceImporter', 'gov.epa.emissions.commons.io.temporal.TemporalReferenceExporter');
insert into emf.dataset_types values(DEFAULT,'Temporal Profile (A/M/PTPRO)','Temporal Profile (A/M/PTPRO)', '1', '1',false,'', 'gov.epa.emissions.commons.io.temporal.TemporalProfileImporter', 'gov.epa.emissions.commons.io.temporal.TemporalProfileExporter', '', null, 4);
insert into emf.dataset_types values(DEFAULT,'Comma Separated Values (CSV)','Comma Separated Values (CSV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Text file (Line-based)','Text file (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'CEM Hour-Specific Point Inventory (PTHOUR)','CEM Hour-Specific Point Inventory (PTHOUR)', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.CEMHourSpecInventoryImporter', 'gov.epa.emissions.commons.io.other.CEMHourSpecInventoryExporter');
insert into emf.dataset_types values(DEFAULT,'Country, state, and county names and data (COSTCY)','Country, state, and county names and data (COSTCY)', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.CountryStateCountyDataImporter', 'gov.epa.emissions.commons.io.other.CountryStateCountyDataExporter', '', null, 3);
insert into emf.dataset_types values(DEFAULT,'Day-Specific Point Inventory (PTDAY)','Day-Specific Point Inventory (PTDAY)', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.DaySpecPointInventoryImporter', 'gov.epa.emissions.commons.io.other.DaySpecPointInventoryExporter');
insert into emf.dataset_types values(DEFAULT,'Inventory Table Data (INVTABLE)','Inventory Table Data (INVTABLE)', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.InventoryTableImporter', 'gov.epa.emissions.commons.io.other.InventoryTableExporter');
insert into emf.dataset_types values(DEFAULT,'Point-Source Stack Replacements (PSTK)','Point-Source Stack Replacements (PSTK)', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.PointStackReplacementsImporter', 'gov.epa.emissions.commons.io.other.PointStackReplacementsExporter');
insert into emf.dataset_types values(DEFAULT,'SMOKE Report','SMOKE Report', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.SMKReportImporter', 'gov.epa.emissions.commons.io.other.SMKReportExporter');
insert into emf.dataset_types values(DEFAULT,'Surrogate Descriptions (SRGDESC)','Surrogate Descriptions (SRGDESC)', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.SurrogatesDescriptionImporter', 'gov.epa.emissions.commons.io.other.SurrogatesDescriptionExporter');
insert into emf.dataset_types values(DEFAULT,'Gridding Cross Reference (A/MGREF)','Gridding Cross Reference (A/MGREF)', '1', '1', false,'', 'gov.epa.emissions.commons.io.spatial.GridCrossReferenceImporter', 'gov.epa.emissions.commons.io.spatial.GridCrossReferenceExporter');
insert into emf.dataset_types values(DEFAULT,'Spatial Surrogates (A/MGPRO)','Spatial Surrogates (A/MGPRO)', '1', '1', false,'', 'gov.epa.emissions.commons.io.spatial.SpatialSurrogatesImporter', 'gov.epa.emissions.commons.io.spatial.SpatialSurrogatesExporter');
insert into emf.dataset_types values(DEFAULT,'Chemical Speciation Cross-Reference (GSREF)','Chemical Speciation Cross-Reference (GSREF)', '1', '1', false,'', 'gov.epa.emissions.commons.io.speciation.SpeciationCrossReferenceImporter', 'gov.epa.emissions.commons.io.speciation.SpeciationCrossReferenceExporter');
insert into emf.dataset_types values(DEFAULT,'Chemical Speciation Profiles (GSPRO)','Chemical Speciation Profiles (GSPRO)', '1', '1', false,'', 'gov.epa.emissions.commons.io.speciation.SpeciationProfileImporter', 'gov.epa.emissions.commons.io.speciation.SpeciationProfileExporter');
insert into emf.dataset_types values(DEFAULT,'Chemical Speciation Combo Profiles (GSPRO_COMBO)','Chemical Speciation Combo Profiles (GSPRO_COMBO)', '1', '1', false,'', 'gov.epa.emissions.commons.io.speciation.SpeciationComboProfileImporter', 'gov.epa.emissions.commons.io.speciation.SpeciationComboProfileExporter');
insert into emf.dataset_types values(DEFAULT,'NIF3.0 Point Inventory','NIF3.0 Point Inventory', '6', '7', false,'', 'gov.epa.emissions.commons.io.nif.point.NIFPointImporter', '');
insert into emf.dataset_types values(DEFAULT,'NIF3.0 Onroad Inventory','NIF3.0 Onroad Inventory', '2', '3', false,'', 'gov.epa.emissions.commons.io.nif.onroad.NIFOnRoadImporter', '');
insert into emf.dataset_types values(DEFAULT,'NIF3.0 Nonpoint Inventory','NIF3.0 Nonpoint Inventory', '2', '4', false,'', 'gov.epa.emissions.commons.io.nif.nonpointNonroad.NIFNonPointImporter', '');
insert into emf.dataset_types values(DEFAULT,'NIF3.0 Nonroad Inventory','NIF3.0 Nonroad Inventory', '2', '4', false,'', 'gov.epa.emissions.commons.io.nif.nonpointNonroad.NIFNonRoadImporter', '');
insert into emf.dataset_types values(DEFAULT,'IDA Mobile','IDA Mobile', '1', '1', false,'', 'gov.epa.emissions.commons.io.ida.IDAMobileImporter', 'gov.epa.emissions.commons.io.ida.IDAMobileExporter');
insert into emf.dataset_types values(DEFAULT,'IDA Nonpoint/Nonroad','IDA Nonpoint/Nonroad', '1', '1', false,'', 'gov.epa.emissions.commons.io.ida.IDANonPointNonRoadImporter', 'gov.epa.emissions.commons.io.ida.IDANonPointNonRoadExporter');
insert into emf.dataset_types values(DEFAULT,'IDA Point','IDA Point', '1', '1', false,'', 'gov.epa.emissions.commons.io.ida.IDAPointImporter', 'gov.epa.emissions.commons.io.ida.IDAPointExporter');
insert into emf.dataset_types values(DEFAULT,'IDA Activity','IDA Activity', '1', '1', false,'', 'gov.epa.emissions.commons.io.ida.IDAActivityImporter', 'gov.epa.emissions.commons.io.ida.IDAActivityExporter');
insert into emf.dataset_types values(DEFAULT,'Shapefile Catalog (CSV)','Shapefile Catalog (CSV)','1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Surrogate Tool Control Variables (CSV)','Surrogate Tool Control Variables (CSV)','1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Surrogate Specifications (CSV)','Surrogate Specifications (CSV)','1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Surrogate Tool Generation Controls (CSV)','Surrogate Tool Generation Controls (CSV)','1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Surrogate Code Mapping (CSV)','Surrogate Code Mapping (CSV)','1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Area-to-point Conversions (Line-based)','Area-to-point Conversions (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'Grid Descriptions (Line-based)','Grid Descriptions (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'Report Configurations (Line-based)','Report Configurations (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'Growth and Controls Configurations (Line-based)','Growth and Controls Configurations (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'Holiday Identifications (Line-based)','Holiday Identifications (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'BEIS3 Emission Factors (Line-based)','BEIS3 Emission Factors (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'Mobile Source Codes (Line-based)','Mobile Source Codes (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'NonHAP VOC Calculation Exclusions (Line-based)','NonHAP VOC Calculation Exclusions (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'SIC Descriptions (Line-based)','SIC Descriptions (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
insert into emf.dataset_types values(DEFAULT,'SCC Descriptions (Line-based)','SCC Descriptions (Line-based)', '1', '1', false,'LINE_NUMBER', 'gov.epa.emissions.commons.io.generic.LineImporter', 'gov.epa.emissions.commons.io.generic.LineExporter');
-- for control strategy result
insert into emf.dataset_types values(DEFAULT,'Control Strategy Detailed Result','Control Strategy Detailed Result', '1', '1', false,'', '', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Pollutant to Pollutant Conversion (GSCNV)','Pollutant to Pollutant Conversion (GSCNV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.GSCNVImporter', 'gov.epa.emissions.commons.io.other.GSCNVExporter');
insert into emf.dataset_types values(DEFAULT,'ORL Fires Inventory (PTINV)','ORL Fire Inventory (PTINV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.orl.ORLFiresInvImporter', 'gov.epa.emissions.commons.io.orl.ORLFiresInvExporter');
insert into emf.dataset_types values(DEFAULT,'ORL Day-Specific Fires Inventory (PTDAY)','ORL Day-Specific Fires Inventory (PTDAY)', '1', '1', false,'', 'gov.epa.emissions.commons.io.orl.ORLDaySpecFiresImporter', 'gov.epa.emissions.commons.io.orl.ORLDaySpecFiresExporter');
insert into emf.dataset_types values(DEFAULT,'Control Strategy Result Summary','Control Strategy Result Summary', '1', '1', false,'', '', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'List of Counties (CSV)','List of Counties (CSV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Control Strategy Least Cost Control Measure Worksheet','Control Strategy Least Cost Control Measure Worksheet', '1', '1', false,'', '', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Control Strategy Least Cost Curve Summary','Control Strategy Least Cost Curve Summary', '1', '1', false,'', '', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Plant Closure (CSV)','Plant Closure (CSV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Strategy Messages (CSV)','Strategy Messages (CSV)', '1', '1', false,'', '', 'gov.epa.emissions.commons.io.other.StrategyMessagesExporter');
insert into emf.dataset_types values(DEFAULT,'Plant Closure (CSV)','Plant Closure (CSV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Abbreviated Projection (CSV)','Abbreviated Projection (CSV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Extended Projection (CSV)','Extended Projection (CSV)', '1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');
insert into emf.dataset_types values(DEFAULT,'Projection Packet','Projection Packet', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.ProjectionPacketImporter', 'gov.epa.emissions.commons.io.other.ProjectionPacketExporter');
-- emf.dataset_types
--
-- emf.intended_uses
insert into emf.intended_uses values (DEFAULT, 'public');
insert into emf.intended_uses values (DEFAULT, 'public read-only');
insert into emf.intended_uses values (DEFAULT, 'group read+write');
insert into emf.intended_uses values (DEFAULT, 'group read-only');
insert into emf.intended_uses values (DEFAULT, 'private');
-- emf.intended_uses
--
-- emf.note_types
insert INTO emf.note_types VALUES (DEFAULT, 'Problem');
insert INTO emf.note_types VALUES (DEFAULT, 'Observation');
insert INTO emf.note_types VALUES (DEFAULT, 'Question');
insert INTO emf.note_types VALUES (DEFAULT, 'Answer');
insert INTO emf.note_types VALUES (DEFAULT, 'Resolution');
insert INTO emf.note_types VALUES (DEFAULT, 'Replaced by dataset');
insert INTO emf.note_types VALUES (DEFAULT, 'Replaces dataset ');
insert INTO emf.note_types VALUES (DEFAULT, 'Explanation');
insert INTO emf.note_types VALUES (DEFAULT, 'Reference');
-- emf.note_types
--
-- emf.keywords
insert INTO emf.keywords VALUES (DEFAULT, 'EXPORT_HEADER_COMMENTS');
insert INTO emf.keywords VALUES (DEFAULT, 'EXPORT_INLINE_COMMENTS');
insert INTO emf.keywords VALUES (DEFAULT, 'HEADER_COMMENT_CHAR');
insert INTO emf.keywords VALUES (DEFAULT, 'INLINE_COMMENT_CHAR');
insert INTO emf.keywords VALUES (DEFAULT, 'EXPORT_PREFIX');
insert INTO emf.keywords VALUES (DEFAULT, 'EXPORT_SUFFIX');
insert INTO emf.keywords VALUES (DEFAULT, 'REPLACES_DATASET');
insert INTO emf.keywords VALUES (DEFAULT, 'REPLACED_BY_DATASET');
insert INTO emf.keywords VALUES (DEFAULT, 'EXPORT_COLUMN_LABEL');
insert INTO emf.keywords VALUES (DEFAULT, 'COLUMN_TYPES');
insert INTO emf.keywords VALUES (DEFAULT, 'PREVIOUS_LOCATION');
insert INTO emf.keywords VALUES (DEFAULT, 'MASS_STORAGE_LOCATION');
-- emf.keywords
--

-- emf.dataset_type_keywords
insert into emf.dataset_types_keywords (dataset_type_id, list_index, keyword_id, "value")
select id as dataset_type_id,
  (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index,
  (select id from emf.keywords where "name" = 'COLUMN_TYPES') as keyword_id,
  'varchar(6)|varchar(15)|varchar(15)|varchar(15)|varchar(15)|varchar(40)|varchar(10)|varchar(255)' as "value"
from emf.dataset_types dt
where name in ('Plant Closure (CSV)');
insert into emf.dataset_types_keywords (dataset_type_id, list_index, keyword_id, "value")
select id as dataset_type_id,
  (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index,
  (select id from emf.keywords where "name" = 'COLUMN_TYPES') as keyword_id,
  'varchar(6)|varchar(15)|varchar(15)|varchar(15)|varchar(15)|varchar(40)|varchar(10)|varchar(255)' as "value"
from emf.dataset_types dt
where name in ('Abbreviated Projection (CSV)');
insert into emf.dataset_types_keywords (dataset_type_id, list_index, keyword_id, "value")
select id as dataset_type_id,
  (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index,
  (select id from emf.keywords where "name" = 'COLUMN_TYPES') as keyword_id,
  'varchar(6)|varchar(15)|varchar(15)|varchar(15)|varchar(15)|varchar(40)|varchar(10)|varchar(255)' as "value"
from emf.dataset_types dt
where name in ('Extended Projection (CSV)');
-- emf.dataset_type_keywords

-- emf.qa_programs
insert into emf.qa_programs values(DEFAULT,'SQL','gov.epa.emissions.framework.services.qa.SQLQAProgramRunner');
insert into emf.qa_programs values(DEFAULT,'Smkreport','');
insert into emf.qa_programs values(DEFAULT,'Manual','');
insert into emf.qa_programs values(DEFAULT,'Analysis Engine','');
insert into emf.qa_programs values(DEFAULT,'Average Day to Annual State Summary','gov.epa.emissions.framework.services.qa.SQLAnnualQueryRunner');
insert into emf.qa_programs values(DEFAULT,'Average day to Annual Inventory','gov.epa.emissions.framework.services.qa.SQLQAAnnualNonsummaryQueryRunner');
insert into emf.qa_programs values(DEFAULT,'Fire Data Summary (Day-specific)','gov.epa.emissions.framework.services.qa.FireProgramRunner');
insert into emf.qa_programs values(DEFAULT,'Multi-inventory sum','gov.epa.emissions.framework.services.qa.MultiInvSumProgramRunner');
insert into emf.qa_programs values(DEFAULT,'Multi-inventory column report','gov.epa.emissions.framework.services.qa.NInvDiffProgramRunner');
insert into emf.qa_programs values(DEFAULT,'Multi-inventory difference report','gov.epa.emissions.framework.services.qa.MultiInvDiffProgramRunner');

--
-- the dataset type id field depends on the order of dataset type table (ORL type being first)
-- emf.dataset_types_qa_step_templates
-- TODO: we need to set all line based dataset types to have a default sort order of LINE_NUMBER
-- TODO: we need to set all CSV based dataset types to set keywords EXPORT_INLINE_COMMENTS to false and
--       export_suffix to .csv - perhaps these things and the ones below are better done with a Java class
--       because if the dataset type numbers change, having them in this script won't work

-- Summarize by Pollutant - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Pollutant', 1, 'select POLL, sum(ann_emis) as ann_emis from $TABLE[1] e group by POLL order by POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector and Pollutant - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector and Pollutant', 1, 'select sector, POLL, sum(ann_emis) as ann_emis from $TABLE[1] e group by sector, POLL order by sector, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by Pollutant - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Pollutant', 1, 'select sector, POLL, case when coalesce(sum(Emis_Reduction),0) <> 0 then sum(Annual_Cost) / sum(Emis_Reduction) else null end as avg_cost_per_ton, sum(Annual_Cost) as Annual_Cost, sum(Final_emissions) as Final_emissions, sum(Emis_Reduction) as Emis_Reduction, sum(Inv_emissions) as Inv_emissions from $TABLE[1] e group by sector, POLL order by sector, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result');

-- Summarize by SCC and Pollutant - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by SCC and Pollutant', 1, 'select SCC, POLL, sum(ann_emis) as ann_emis from $TABLE[1] e group by SCC, POLL order by SCC, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector, SCC and Pollutant - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector, SCC and Pollutant', 1, 'select sector, SCC, POLL, sum(ann_emis) as ann_emis from $TABLE[1] e group by sector, SCC, POLL order by sector, SCC, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by SCC and Pollutant - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by SCC and Pollutant', 1, 'select sector, SCC, POLL, case when coalesce(sum(Emis_Reduction),0) <> 0 then sum(Annual_Cost) / sum(Emis_Reduction) else null end as avg_cost_per_ton, sum(Annual_Cost) as Annual_Cost, sum(Final_emissions) as Final_emissions, sum(Emis_Reduction) as Emis_Reduction, sum(Inv_emissions) as Inv_emissions from $TABLE[1] e group by sector, SCC, POLL order by sector, SCC, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result');

-- Summarize by County and Pollutant - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by County and Pollutant', 1, 'select FIPS, POLL, sum(ann_emis) as ann_emis from $TABLE[1] e group by FIPS, POLL order by FIPS, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector, County and Pollutant - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector, County and Pollutant', 1, 'select sector, FIPS, POLL, sum(ann_emis) as ann_emis from $TABLE[1] e group by sector, FIPS, POLL order by sector, FIPS, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by County and Pollutant - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by County and Pollutant', 1, 'select sector, FIPS, POLL, case when coalesce(sum(Emis_Reduction),0) <> 0 then sum(Annual_Cost) / sum(Emis_Reduction) else null end as avg_cost_per_ton, sum(Annual_Cost) as Annual_Cost, sum(Final_emissions) as Final_emissions, sum(Emis_Reduction) as Emis_Reduction, sum(Inv_emissions) as Inv_emissions from $TABLE[1] e group by sector, FIPS, POLL order by sector, FIPS, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result');

-- Summarize by U.S. State and Pollutant - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by U.S. State and Pollutant', 1, 'select fips.state_name, fips.state_abbr, fips.fipsst, e.POLL, sum(ann_emis) as ann_emis from $TABLE[1] e inner join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, fips.fipsst, POLL order by fips.state_name, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector, U.S. State and Pollutant - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector, U.S. State and Pollutant', 1, 'select e.sector, fips.state_name, fips.state_abbr, fips.fipsst, e.POLL, sum(ann_emis) as ann_emis from $TABLE[1] e inner join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by e.sector, fips.state_name, fips.state_abbr, fips.fipsst, POLL order by e.sector, fips.state_name, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by U.S. State and Pollutant - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by U.S. State and Pollutant', 1, 'select e.sector, fips.state_name, fips.state_abbr, fips.fipsst, e.POLL, case when coalesce(sum(Emis_Reduction),0) <> 0 then sum(Annual_Cost) / sum(Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by sector, fips.state_name, fips.state_abbr, fips.fipsst, POLL order by sector, fips.state_name, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result');

-- Summarize by Control Measure and Pollutant - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Control Measure and Pollutant', 1, 'select e.sector, cm.name as Measure_Name, e.cm_abbrev as Measure_Abbreviation, sg.name as Source_Group, ct.name as Control_Technology, e.POLL, case when coalesce(sum(e.Emis_Reduction),0) <> 0 then sum(e.Annual_Cost) / sum(e.Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e left outer join emf.control_measures cm on cm.abbreviation = e.cm_abbrev left outer join emf.source_groups sg on sg.id = cm.source_group left outer join emf.control_technologies ct on ct.id = cm.control_technology group by e.sector, cm.name, e.cm_abbrev, sg.name, ct.name, e.POLL order by e.sector, cm.name, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result');

-- Summarize by Source Group and Pollutant - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Source Group and Pollutant', 1, 'select sector, sg.name as Source_Group, e.POLL, case when coalesce(sum(e.Emis_Reduction),0) <> 0 then sum(e.Annual_Cost) / sum(e.Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e left outer join emf.control_measures cm on cm.abbreviation = e.cm_abbrev left outer join emf.source_groups sg on sg.id = cm.source_group group by sector, sg.name, e.POLL order by sector, sg.name, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result');

-- Summarize by Control Technology and Pollutant - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Control Technology and Pollutant', 1, 'select sector, ct.name as Control_Technology, e.POLL, case when coalesce(sum(e.Emis_Reduction),0) <> 0 then sum(e.Annual_Cost) / sum(e.Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e left outer join emf.control_measures cm on cm.abbreviation = e.cm_abbrev left outer join emf.control_technologies ct on ct.id = cm.control_technology group by sector, ct.name, e.POLL order by sector, ct.name, e.POLL', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result');

-- Summarize by State, SCC, and Control Technology - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by State, SCC, and Control Technology', 1, 'select e.sector, ct.name as Control_Technology, e.POLL, e.fipsst, e.scc, case when coalesce(sum(e.Emis_Reduction),0) <> 0 then sum(e.Annual_Cost) / sum(e.Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e left outer join emf.control_measures cm on cm.abbreviation = e.cm_abbrev left outer join emf.control_technologies ct on ct.id = cm.control_technology group by e.sector, ct.name, e.POLL, e.fipsst, e.scc order by e.sector, ct.name, e.POLL, e.fipsst, e.scc', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result'); 


-- Summarize by Control Technology and Pollutant - Control Strategy Result Summary
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Control Technology and Pollutant', 1, 'select e.Control_Technology, e.poll, case when coalesce(sum(e.Emis_Reduction),0) <> 0 then sum(e.Annual_Cost) / sum(e.Emis_Reduction) else null end as avg_ann_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Emis_Reduction) as Emis_Reduction from $TABLE[1] e  group by e.Control_Technology, e.poll order by e.Control_Technology, e.poll', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Result Summary'); 

-- Cost Curve - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Cost Curve', 1, 'select poll, 
	coalesce(ann_cost_per_ton,0) as ann_cost_per_ton, 
	coalesce(incremental_cost_per_ton,0) as inc_cost_per_ton, 
	coalesce(cumulative_emis_reduction,0) as cum_emis_reduction, 
	coalesce(incremental_emis_reduction,0) as inc_emis_reduction, 
	coalesce(cumulative_annual_cost,0) as cum_annual_cost, 
	coalesce(incremental_annual_cost,0) as inc_annual_cost, 
	case when coalesce(incremental_emis_reduction, 0) != 0 then incremental_cost_Per_ton / incremental_emis_reduction else 0.0 end as slope, 
	case when coalesce((select sum(emis_reduction) from $TABLE[1] e where e.poll = tbl.poll), 0) != 0 then cumulative_emis_reduction / (select sum(emis_reduction) from $TABLE[1] e where e.poll = tbl.poll) else null end as pct_emis_red
from (
select poll, 
	d.ann_cost_per_ton, 

	(select sum(e.emis_reduction) 
	from $TABLE[1] e
	where coalesce(e.ann_cost_per_ton,0) <= coalesce(d.ann_cost_per_ton,0)
	) as cumulative_emis_reduction,

	coalesce(ann_cost_per_ton,0) - 
	coalesce((select distinct on (coalesce(f.ann_cost_per_ton,0)) f.ann_cost_per_ton 
		from $TABLE[1] f
		where coalesce(f.ann_cost_per_ton,0) < coalesce(d.ann_cost_per_ton,0)
		order by coalesce(f.ann_cost_per_ton,0) desc
		limit 1),0) as incremental_cost_Per_ton,

	coalesce((select sum(e.emis_reduction) 
	from $TABLE[1] e
	where coalesce(e.ann_cost_per_ton,0) <= coalesce(d.ann_cost_per_ton,0)
	), 0) - 
	coalesce((select sum(e.emis_reduction) 
	from $TABLE[1] e
	where coalesce(e.ann_cost_per_ton,0) <= coalesce((
		select distinct on (coalesce(f.ann_cost_per_ton,0)) f.ann_cost_per_ton 
		from $TABLE[1] f
		where coalesce(f.ann_cost_per_ton,0) < coalesce(d.ann_cost_per_ton,0)
		order by coalesce(f.ann_cost_per_ton,0) desc
		limit 1
		),0)),0) as incremental_emis_reduction,

	(select sum(e.annual_cost) 
	from $TABLE[1] e
	where coalesce(e.ann_cost_per_ton,0) <= coalesce(d.ann_cost_per_ton,0)
	) as cumulative_annual_cost,

	coalesce((select sum(e.annual_cost) 
	from $TABLE[1] e
	where coalesce(e.ann_cost_per_ton,0) <= coalesce(d.ann_cost_per_ton,0)
	), 0) - 
	coalesce((select sum(e.annual_cost) 
	from $TABLE[1] e
	where coalesce(e.ann_cost_per_ton,0) <= coalesce((
		select distinct on (coalesce(f.ann_cost_per_ton,0)) f.ann_cost_per_ton 
		from $TABLE[1] f
		where coalesce(f.ann_cost_per_ton,0) < coalesce(d.ann_cost_per_ton,0)
		order by coalesce(f.ann_cost_per_ton,0) desc
		limit 1
		),0)),0) as incremental_annual_cost

from $TABLE[1] d
WHERE 1 = 1
group by poll, d.ann_cost_per_ton) tbl
order by poll, coalesce(ann_cost_per_ton,0)', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result'); 


-- Summarize by SCC and Pollutant with Descriptions - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by SCC and Pollutant with Descriptions', 1, 'select e.SCC, coalesce(s.scc_description,''AN UNSPECIFIED DESCRIPTION'') as scc_description, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name,p.factor, p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL=p.cas left outer join reference.scc s on e.SCC=s.scc group by e.SCC,e.POLL,p.descrptn,s.scc_description, p.name, p.factor,p.voctog, p.species order by e.SCC, p.name', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector, SCC and Pollutant with Descriptions - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector, SCC and Pollutant with Descriptions', 1, 'select e.sector, e.SCC, coalesce(s.scc_description,''AN UNSPECIFIED DESCRIPTION'') as scc_description, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name,p.factor, p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL=p.cas left outer join reference.scc s on e.SCC=s.scc group by e.sector, e.SCC,e.POLL,p.descrptn,s.scc_description, p.name, p.factor,p.voctog, p.species order by e.sector, e.SCC, p.name', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by U.S. County and Pollutant with Descriptions - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by U.S. County and Pollutant with Descriptions', 1, 'select e.fips, coalesce(fips.county,''AN UNSPECIFIED COUNTY NAME'') as county, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED DESCRIPTION'') as smoke_name, p.factor,p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL=p.cas left outer join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species, e.fips, fips.county order by e.fips, e.POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector, U.S. County and Pollutant with Descriptions - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector, U.S. County and Pollutant with Descriptions', 1, 'select e.sector, e.fips, coalesce(fips.county,''AN UNSPECIFIED COUNTY NAME'') as county, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED DESCRIPTION'') as smoke_name, p.factor,p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL=p.cas left outer join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by e.sector, fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species, e.fips, fips.county order by e.sector, e.fips, e.POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by Pollutant with Descriptions - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Pollutant with Descriptions', 1, 'select e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, p.factor ,p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL = p.cas group by e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species order by p.name', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector, Pollutant with Descriptions - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector, Pollutant with Descriptions', 1, 'select e.sector, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, p.factor ,p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL = p.cas group by e.sector, e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species order by e.sector, p.name', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by Mact Code, U.S. State and Pollutant with Descriptions - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Mact Code, U.S. State and Pollutant with Descriptions', 1, 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, coalesce(e.mact, ''AN UNSPECIFIED MACT CODE'') as mact_code, coalesce(m.mact_source_category, ''AN UNSPECIFIED CATEGORY NAME'') as mact_source_category, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, p.factor,p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL=p.cas left outer join reference.fips on fips.state_county_fips = e.FIPS left outer join reference.mact_codes m on m.mact_code = e.mact where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species, e.mact, m.mact_source_category order by e.mact, substr(e.fips, 1, 2), e.POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Point Inventory (PTINV)');

-- List Data Source Codes and U.S. State with Descriptions - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'List Data Source Codes and U.S. State with Descriptions', 1, 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.data_source, coalesce(d.description,''AN UNSPECIFIED DESCRIPTION'') as datasource_desc, count(1) as count from $TABLE[1] e left outer join reference.datasource_codes d on e.data_source=d.code left outer join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.data_source, d.description order by substr(e.fips, 1, 2), e.data_source', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)');

-- Summarize by Data Source Code, U.S. State and Pollutant with Descriptions - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Data Source Code, U.S. State and Pollutant with Descriptions', 1, 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.data_source, coalesce(d.description,''AN UNSPECIFIED DESCRIPTION'') as datasource_desc, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.datasource_codes d on e.data_source=d.code left outer join reference.invtable p on e.POLL=p.cas left outer join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.poll, e.data_source, d.description, d.description, p.descrptn, p.name order by substr(e.fips, 1, 2), e.data_source', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)');

-- Summarize by U.S. State and Pollutant with Descriptions - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by U.S. State and Pollutant with Descriptions', 1, 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, p.factor,p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL=p.cas left outer join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species order by substr(e.fips, 1, 2)', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector, U.S. State and Pollutant with Descriptions - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector, U.S. State and Pollutant with Descriptions', 1, 'select e.sector, substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, p.factor,p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL=p.cas left outer join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by e.sector, fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species order by e.sector, substr(e.fips, 1, 2)', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by U.S. State, SCC and Pollutant with Descriptions - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by U.S. State, SCC and Pollutant with Descriptions', 1, 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.SCC, coalesce(s.scc_description,''AN UNSPECIFIED DESCRIPTION'') as scc_description, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, p.factor,p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL=p.cas left outer join reference.scc s on e.SCC=s.scc left outer join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by substr(e.fips, 1, 2), fips.state_abbr, fips.state_name, e.SCC,e.POLL,p.descrptn,s.scc_description, p.name, p.factor,p.voctog, p.species order by substr(e.fips, 1, 2), e.SCC, e.POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector, U.S. State, SCC and Pollutant with Descriptions - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector, U.S. State, SCC and Pollutant with Descriptions', 1, 'select e.sector, substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.SCC, coalesce(s.scc_description,''AN UNSPECIFIED DESCRIPTION'') as scc_description, e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, p.factor,p.voctog, p.species, coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.invtable p on e.POLL=p.cas left outer join reference.scc s on e.SCC=s.scc left outer join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by e.sector, substr(e.fips, 1, 2), fips.state_abbr, fips.state_name, e.SCC,e.POLL,p.descrptn,s.scc_description, p.name, p.factor,p.voctog, p.species order by e.sector, substr(e.fips, 1, 2), e.SCC, e.POLL', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by U.S. State and SMOKE Pollutant Name - ORL Types
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by U.S. State and SMOKE Pollutant Name', 1, 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, r.name, r.species, r.voctog, coalesce(sum(cast(r.factor as double precision) * ann_emis), 0) as ann_emis, coalesce(sum(cast(r.factor as double precision) * avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.fips on fips.state_county_fips = e.FIPS inner join reference.invtable r on e.poll = r.cas where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), r.name, r.voctog, r.species   order by substr(e.fips, 1, 2),  r.species, r.voctog, r.name', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory');

-- Summarize by Sector, U.S. State and SMOKE Pollutant Name - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Sector, U.S. State and SMOKE Pollutant Name', 1, 'select e.sector, substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, r.name, r.species, r.voctog, coalesce(sum(cast(r.factor as double precision) * ann_emis), 0) as ann_emis, coalesce(sum(cast(r.factor as double precision) * avd_emis), 0) as avd_emis from $TABLE[1] e left outer join reference.fips on fips.state_county_fips = e.FIPS inner join reference.invtable r on e.poll = r.cas where fips.country_num = ''0'' group by e.sector, fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), r.name, r.voctog, r.species   order by e.sector, substr(e.fips, 1, 2),  r.species, r.voctog, r.name', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Compare CoST to NEI measures - 'ORL Point Inventory (PTINV)','ORL Merged Inventory'
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Compare CoST to NEI measures', 1, 'select e.scc, fips, plantid, pointid, stackid, segment, poll, ann_emis, avd_emis,
	ceff as inv_ceff,
	(string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)] as measure_abbreviation,
	cm.name as measure_name,
	(string_to_array(pct_reduction::text, ''&''))[array_upper(string_to_array(pct_reduction::text, ''&''), 1)] as measure_ceff,
	abs(ceff - (string_to_array(pct_reduction::text, ''&''))[array_upper(string_to_array(pct_reduction::text, ''&''), 1)]::double precision) as ceff_abs_diff,
	e.cpri,
	cd.control_device_desc as pri_control_device,
	e.csec,
	cd2.control_device_desc as sec_control_device, 
	scc_description

from $TABLE[1] e

	left outer join emf.control_measures cm
	on cm.abbreviation = (string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)]

	left outer join reference.control_device cd2
	on cd2.control_device_code::integer = e.csec

	left outer join reference.control_device cd
	on cd.control_device_code::integer = e.cpri

	left outer join reference.scc sccs
	on sccs.scc = e.scc
where coalesce(ceff, 0.0) > 0 
	or length(control_measures) > 0
order by abs(ceff - (string_to_array(pct_reduction::text, ''&''))[array_upper(string_to_array(pct_reduction::text, ''&''), 1)]::double precision)', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Point Inventory (PTINV)');

-- Compare CoST to NEI measures - 'ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)'
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Compare CoST to NEI measures', 1, 'select e.scc, fips, poll, ann_emis, avd_emis,
	ceff as inv_ceff,
	(string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)] as measure_abbreviation,
	cm.name as measure_name,
	(string_to_array(pct_reduction::text, ''&''))[array_upper(string_to_array(pct_reduction::text, ''&''), 1)] as measure_ceff,
	abs(ceff - (string_to_array(pct_reduction::text, ''&''))[array_upper(string_to_array(pct_reduction::text, ''&''), 1)]::double precision) as ceff_abs_diff,
	e.PRIMARY_DEVICE_TYPE_CODE as cpri,
	cd.control_device_desc as pri_control_device,
	e.SECONDARY_DEVICE_TYPE_CODE as csec,
	cd2.control_device_desc as sec_control_device, 
	scc_description

from $TABLE[1] e

	left outer join emf.control_measures cm
	on cm.abbreviation = (string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)]

	left outer join reference.control_device cd2
	on cd2.control_device_code::integer = e.SECONDARY_DEVICE_TYPE_CODE

	left outer join reference.control_device cd
	on cd.control_device_code::integer = e.PRIMARY_DEVICE_TYPE_CODE

	left outer join reference.scc sccs
	on sccs.scc = e.scc
where coalesce(ceff, 0.0) > 0 
	or length(control_measures) > 0
order by abs(ceff - (string_to_array(pct_reduction::text, ''&''))[array_upper(string_to_array(pct_reduction::text, ''&''), 1)]::double precision)', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)');


-- Compare CoST to NEI measures - 'ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)'
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Compare CoST to NEI measures', 1, 'select e.scc, fips, poll, ann_emis, avd_emis,
	ceff as inv_ceff,
	(string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)] as measure_abbreviation,
	cm.name as measure_name,
	(string_to_array(pct_reduction::text, ''&''))[array_upper(string_to_array(pct_reduction::text, ''&''), 1)] as measure_ceff,
	abs(ceff - (string_to_array(pct_reduction::text, ''&''))[array_upper(string_to_array(pct_reduction::text, ''&''), 1)]::double precision) as ceff_abs_diff, 
	scc_description

from $TABLE[1] e

	left outer join emf.control_measures cm
	on cm.abbreviation = (string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)]

	left outer join reference.scc sccs
	on sccs.scc = e.scc
where coalesce(ceff, 0.0) > 0 
	or length(control_measures) > 0
order by abs(ceff - (string_to_array(pct_reduction::text, ''&''))[array_upper(string_to_array(pct_reduction::text, ''&''), 1)]::double precision)', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)');

-- Compare CoST to NEI measures - 'ORL Point Inventory (PTINV)','ORL Merged Inventory'
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Roll Up CoST and NEI measures', 1, 'select distinct e.cpri as inv_pri_control_device_code,
	cd.control_device_desc as inv_pri_control_device,
	(string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)] as cost_measure_abbreviation,
	cm.name as cost_measure_name,
	ct."name" as cost_control_technology
	
from $TABLE[1] e

	left outer join emf.control_measures cm
	on cm.abbreviation = (string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)]

	left outer join emf.control_technologies ct
	on ct.id = cm.control_technology

	left outer join reference.control_device cd
	on cd.control_device_code::integer = e.cpri

	left outer join reference.scc sccs
	on sccs.scc = e.scc
where coalesce(ceff, 0.0) > 0 
	and length(control_measures) > 0
order by e.cpri,
	cd.control_device_desc,
	cm.name,
	ct."name"', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Point Inventory (PTINV)');

-- Compare CoST to NEI measures - 'ORL Nonpoint Inventory (ARINV)'
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Roll Up CoST and NEI measures', 1, 'select distinct e.PRIMARY_DEVICE_TYPE_CODE as inv_pri_control_device_code,
	cd.control_device_desc as inv_pri_control_device,
	(string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)] as cost_measure_abbreviation,
	cm.name as cost_measure_name,
	ct."name" as cost_control_technology
	
from $TABLE[1] e

	left outer join emf.control_measures cm
	on cm.abbreviation = (string_to_array(e.control_measures::text, ''&''))[array_upper(string_to_array(e.control_measures::text, ''&''), 1)]

	left outer join emf.control_technologies ct
	on ct.id = cm.control_technology

	left outer join reference.control_device cd
	on cd.control_device_code::integer = e.PRIMARY_DEVICE_TYPE_CODE

	left outer join reference.scc sccs
	on sccs.scc = e.scc
where coalesce(ceff, 0.0) > 0 
	and length(control_measures) > 0
order by e.cpri,
	cd.control_device_desc,
	cm.name,
	ct."name"', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)');


-- Summarize by Plant and Pollutant - ORL Point Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Plant and Pollutant', 1, 'select fips, 
	plantid, 
	plant, 
	poll, 
	sum(ann_emis) as ann_emis, 
	sum(avd_emis) as avd_emis,  
	avg(xloc) as avg_lat, 
	avg(yloc) as avg_long, 
	max(stkhgt) as max_stkhgt, 
	max(stkdiam) as max_stkdiam, 
	max(stktemp) as max_stktemp, 
	max(stkflow) as max_stkflow, 
	max(stkvel) as max_stkvel
from $TABLE[1] e
group by fips,
	plantid,
	plant,
	poll
order by fips, 
	plantid, 
	poll', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Point Inventory (PTINV)');

-- Summarize by Plant and Pollutant - ORL Merged Inventory
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Plant and Pollutant', 1, 'select fips, 
	plantid, 
	plant, 
	poll, 
	sum(ann_emis) as ann_emis, 
	sum(avd_emis) as avd_emis 
from $TABLE[1] e
group by fips,
	plantid,
	plant,
	poll
order by fips, 
	plantid, 
	poll', false, 1, ''
from emf.dataset_types dt
where name in ('ORL Merged Inventory');

-- Summarize by Control Program, U.S. State and Pollutant - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by Control Program, U.S. State and Pollutant', 1, 'select e.control_program, fips.state_name, fips.state_abbr, fips.fipsst, e.POLL, case when coalesce(sum(Emis_Reduction),0) <> 0 then sum(Annual_Cost) / sum(Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join reference.fips on fips.state_county_fips = e.FIPS and fips.country_num = ''0'' group by e.control_program, fips.state_name, fips.state_abbr, fips.fipsst, POLL order by e.control_program, fips.state_name, POLL', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result');
