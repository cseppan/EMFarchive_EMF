insert INTO emf.note_types VALUES (DEFAULT, 'Reference');
-- 12/5/2006
-- Use this to upgrade your schema for export logging
-- 1. Back up your emf.dataset_access_logs table [with options INSERT commands, plain and data only]
-- 2. DROP TABLE emf.dataset_access_logs
-- 3. Create the table as shown below
-- 4. Restore the data from the backup
-- 5. Test to be sure that you can export and that you can view the old and new logs
CREATE TABLE emf.dataset_access_logs
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 REFERENCES emf.datasets (id) NOT NULL,
  lines_exported int8 DEFAULT 0,
  username varchar(255) REFERENCES emf.users (username) NOT NULL,
  dataset_name varchar(255),
  date timestamp NOT NULL,
  start_date timestamp,
  end_date timestamp,
  time_reqrd real DEFAULT 0,
  version varchar(255) NOT NULL,
  description text NOT NULL,
  "location" varchar(255) NOT NULL,
  details text
) 
WITHOUT OIDS;

-- 12/22/2006
-- addition of table per dataset to dataset_types table
ALTER TABLE dataset_types ADD COLUMN table_per_dataset int4 NOT NULL DEFAULT 1;

-- Also, need to remove the table column data from tables
-- Also, need to lock timeout property to 2 hours

-- 3/26/2007
-- added new default QA step to run during a control strategy run
update emf.properties
set value = value || '|Summarize by US State and Pollutant'
where name = 'defaultQASummaries'



-- 7/31/2007 
-- update control strategy dataset types to use new qa engine format...
-- Summarize by Pollutant - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select POLL, sum(ann_emis) as ann_emis from $TABLE[1] e group by POLL order by POLL'
where name = 'Summarize by Pollutant'
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)')
	);

-- Summarize by Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select POLL, avg(Ann_Cost_per_Ton) as avg_cost_per_ton, sum(Annual_Cost) as Annual_Cost, sum(Final_emissions) as Final_emissions, sum(Emis_Reduction) as Emis_Reduction, sum(Inv_emissions) as Inv_emissions from $TABLE[1] e group by POLL order by POLL'
where name = 'Summarize by Pollutant'
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);


-- Summarize by SCC and Pollutant - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select SCC, POLL, sum(ann_emis) as ann_emis from $TABLE[1] e group by SCC, POLL order by SCC, POLL'
where name = 'Summarize by SCC and Pollutant'
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)')
	);

-- Summarize by SCC and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select SCC, POLL, avg(Ann_Cost_per_Ton) as avg_cost_per_ton, sum(Annual_Cost) as Annual_Cost, sum(Final_emissions) as Final_emissions, sum(Emis_Reduction) as Emis_Reduction, sum(Inv_emissions) as Inv_emissions from $TABLE[1] e group by SCC, POLL order by SCC, POLL'
where name = 'Summarize by SCC and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);


-- Summarize by County and Pollutant - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select FIPS, POLL, sum(ann_emis) as ann_emis from $TABLE[1] e group by FIPS, POLL order by FIPS, POLL'
where name = 'Summarize by County and Pollutant'
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)')
	);

-- Summarize by SCC and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select FIPS, POLL, avg(Ann_Cost_per_Ton) as avg_cost_per_ton, sum(Annual_Cost) as Annual_Cost, sum(Final_emissions) as Final_emissions, sum(Emis_Reduction) as Emis_Reduction, sum(Inv_emissions) as Inv_emissions from $TABLE[1] e group by FIPS, POLL order by FIPS, POLL'
where name = 'Summarize by County and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);


-- Summarize by US State and Pollutant - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select fips.state_name, fips.state_abbr, fips.fipsst, e.POLL, sum(ann_emis) as ann_emis from $TABLE[1] e inner join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, fips.fipsst, POLL order by fips.state_name, POLL'
where name = 'Summarize by US State and Pollutant'
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)')
	);

-- Summarize by US State and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select fips.state_name, fips.state_abbr, fips.fipsst, e.POLL, avg(e.Ann_Cost_per_Ton) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, fips.fipsst, POLL order by fips.state_name, POLL'
where name = 'Summarize by US State and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);


-- Summarize by Control Measure and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select cm.name as Measure_Name, cm.abbreviation as Measure_Abbreviation, sg.name as Source_Group, ct.name as Control_Technology, e.POLL, avg(e.Ann_Cost_per_Ton) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join emf.control_measures cm on cm.id = e.cm_id left outer join emf.source_groups sg on sg.id = cm.source_group left outer join emf.control_technologies ct on ct.id = cm.control_technology group by cm.name, cm.abbreviation, sg.name, ct.name, e.POLL order by cm.name, POLL'
where name = 'Summarize by Control Measure and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);


-- Summarize by Source Group and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select sg.name as Source_Group, e.POLL, avg(e.Ann_Cost_per_Ton) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join emf.control_measures cm on cm.id = e.cm_id inner join emf.source_groups sg on sg.id = cm.source_group group by sg.name, e.POLL order by sg.name, POLL'
where name = 'Summarize by Source Group and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);


-- Summarize by Control Technology and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select ct.name as Control_Technology, e.POLL, avg(e.Ann_Cost_per_Ton) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join emf.control_measures cm on cm.id = e.cm_id inner join emf.control_technologies ct on ct.id = cm.control_technology group by ct.name, e.POLL order by ct.name, POLL'
where name = 'Summarize by Control Technology and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);
	
-- To add exporter class name for external dataset types
update emf.dataset_types set exporter_classname='gov.epa.emissions.commons.io.external.ExternalFilesExporter' 
where external='TRUE';

-- To add two new qa programs
insert into emf.qa_programs values(DEFAULT,'Average Day to Annual State Summary','gov.epa.emissions.framework.services.qa.SQLAnnualQueryRunner');
insert into emf.qa_programs values(DEFAULT,'Average day to Annual Inventory','gov.epa.emissions.framework.services.qa.SQLQAAnnualNonsummaryQueryRunner');


-- 11/1/2007 - DCD new qa step, Summarize by State, SCC, and Control Technology, for Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize by State, SCC, and Control Technology', 1, 'select ct.name as Control_Technology, e.POLL, e.fipsst, e.scc, sum(e.Annual_Cost) / sum(e.Emis_Reduction) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join emf.control_measures cm on cm.id = e.cm_id inner join emf.control_technologies ct on ct.id = cm.control_technology group by ct.name, e.POLL, e.fipsst, e.scc order by ct.name, e.POLL, e.fipsst, e.scc', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result'); 

-- 11/5/2007 add one key word for csv file header line control
insert INTO emf.keywords VALUES (DEFAULT, 'EXPORT_COLUMN_LABEL');



-- 12/3/2007 - DCD Update Control Strategy Detailed Result QA steps to use right avg_cost_per_ton.
-- Summarize by Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select POLL, sum(e.Annual_Cost) / sum(e.Emis_Reduction) as avg_cost_per_ton, sum(Annual_Cost) as Annual_Cost, sum(Final_emissions) as Final_emissions, sum(Emis_Reduction) as Emis_Reduction, sum(Inv_emissions) as Inv_emissions from $TABLE[1] e group by POLL order by POLL'
where name = 'Summarize by Pollutant'
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);

-- Summarize by SCC and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select SCC, POLL, sum(e.Annual_Cost) / sum(e.Emis_Reduction) as avg_cost_per_ton, sum(Annual_Cost) as Annual_Cost, sum(Final_emissions) as Final_emissions, sum(Emis_Reduction) as Emis_Reduction, sum(Inv_emissions) as Inv_emissions from $TABLE[1] e group by SCC, POLL order by SCC, POLL'
where name = 'Summarize by SCC and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);

-- Summarize by SCC and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select FIPS, POLL, sum(e.Annual_Cost) / sum(e.Emis_Reduction) as avg_cost_per_ton, sum(Annual_Cost) as Annual_Cost, sum(Final_emissions) as Final_emissions, sum(Emis_Reduction) as Emis_Reduction, sum(Inv_emissions) as Inv_emissions from $TABLE[1] e group by FIPS, POLL order by FIPS, POLL'
where name = 'Summarize by County and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);

-- Summarize by US State and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select fips.state_name, fips.state_abbr, fips.fipsst, e.POLL, sum(e.Annual_Cost) / sum(e.Emis_Reduction) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join reference.fips on fips.state_county_fips = e.FIPS where fips.country_num = ''0'' group by fips.state_name, fips.state_abbr, fips.fipsst, POLL order by fips.state_name, POLL'
where name = 'Summarize by US State and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);

-- Summarize by Control Measure and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select cm.name as Measure_Name, cm.abbreviation as Measure_Abbreviation, sg.name as Source_Group, ct.name as Control_Technology, e.POLL, sum(e.Annual_Cost) / sum(e.Emis_Reduction) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join emf.control_measures cm on cm.id = e.cm_id left outer join emf.source_groups sg on sg.id = cm.source_group left outer join emf.control_technologies ct on ct.id = cm.control_technology group by cm.name, cm.abbreviation, sg.name, ct.name, e.POLL order by cm.name, POLL'
where name = 'Summarize by Control Measure and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);

-- Summarize by Source Group and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select sg.name as Source_Group, e.POLL, sum(e.Annual_Cost) / sum(e.Emis_Reduction) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join emf.control_measures cm on cm.id = e.cm_id inner join emf.source_groups sg on sg.id = cm.source_group group by sg.name, e.POLL order by sg.name, POLL'
where name = 'Summarize by Source Group and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);

-- Summarize by Control Technology and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select ct.name as Control_Technology, e.POLL, sum(e.Annual_Cost) / sum(e.Emis_Reduction) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join emf.control_measures cm on cm.id = e.cm_id inner join emf.control_technologies ct on ct.id = cm.control_technology group by ct.name, e.POLL order by ct.name, POLL'
where name = 'Summarize by Control Technology and Pollutant' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);

-- Summarize by State, SCC, and Control Technology - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select ct.name as Control_Technology, e.POLL, e.fipsst, e.scc, sum(e.Annual_Cost) / sum(e.Emis_Reduction) as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e inner join emf.control_measures cm on cm.id = e.cm_id inner join emf.control_technologies ct on ct.id = cm.control_technology group by ct.name, e.POLL, e.fipsst, e.scc order by ct.name, e.POLL, e.fipsst, e.scc'
where name = 'Summarize by State, SCC, and Control Technology' 
	and dataset_type_id in (
		select id
		from emf.dataset_types
		where name in ('Control Strategy Detailed Result')
	);

-- Update emf version 
update emf.properties set value='v1.9 - 1/31/2008' where name='EMF-version';

-- emf.qa_programs  02/12/08 by Dongmei Yang
insert into emf.qa_programs values(DEFAULT,'Fire Data Summary (Day-specific)','gov.epa.emissions.framework.services.qa.FireProgramRunner')

-- new dataset type in emf.dataset_types 2/15/2008
insert into emf.dataset_types values(DEFAULT,'Chemical Speciation Combo Profiles (GSPRO_COMBO)','Chemical Speciation Combo Profiles (GSPRO_COMBO)', '1', '1', false,'', 'gov.epa.emissions.commons.io.speciation.SpeciationComboProfileImporter', 'gov.epa.emissions.commons.io.speciation.SpeciationComboProfileExporter');


-- Table: emf.datasets_notes
CREATE TABLE emf.datasets_notes
(
  id SERIAL PRIMARY KEY,
  dataset_id integer NOT NULL REFERENCES emf.datasets(id),
  note_id integer NOT NULL REFERENCES emf.notes(id),
  UNIQUE(dataset_id, note_id)
) 
WITHOUT OIDS;
-- emf.datasets_notes

-- 2/21/2008 to add a new property to emf.properties table
insert into emf.properties values(DEFAULT, 'USE_IMPORT_TASK_MANAGER', 'false');

-- emf.qa_programs  03/07/08 
insert into emf.qa_programs values(DEFAULT,'Multi-inventory sum','gov.epa.emissions.framework.services.qa.MultiInvSumProgramRunner');
insert into emf.qa_programs values(DEFAULT,'Multi-inventory column report','gov.epa.emissions.framework.services.qa.NInvDiffProgramRunner');
insert into emf.qa_programs values(DEFAULT,'Multi-inventory difference report','gov.epa.emissions.framework.services.qa.MultiInvDiffProgramRunner');

-- drop clumns from emf.notes table 03/12/2008
ALTER TABLE emf.notes DROP COLUMN dataset_id, DROP COLUMN version;

-- add column into emf.datasets_notes table 3/12/2008
ALTER TABLE emf.datasets_notes ADD COLUMN version integer DEFAULT 0;

--added for line0-based data appending 3/26/2008

CREATE OR REPLACE FUNCTION public.run_sum(numeric, numeric, text, text)
  RETURNS numeric AS
$BODY$
   if {![info exists GD(sum.$3.$4)]} {
       set GD(sum.$3.$4) $1
   }
   if {[argisnull 1]} {
       return $GD(sum.$3.$4)
   } else {
       return [set GD(sum.$3.$4) [expr $GD(sum.$3.$4) + $2]]
   }
$BODY$
  LANGUAGE 'pltcl' VOLATILE;
ALTER FUNCTION public.run_sum(numeric, numeric, text, text) OWNER TO emf;


CREATE OR REPLACE FUNCTION public.run_sum(numeric, numeric, text)
  RETURNS numeric AS
'select run_sum($1,$2,$3,statement_timestamp()::text)'
  LANGUAGE 'sql' IMMUTABLE STRICT;
ALTER FUNCTION public.run_sum(numeric, numeric, text) OWNER TO emf;
ALTER TABLE emf.datasets_notes ADD COLUMN version integer DEFAULT 0;

-- 3/20/08 DCD - Changed dataset type name and renamed some supoorting classes...
update emf.dataset_types
set name = 'ORL Merged Inventory',
description = 'ORL Merged Inventory',
importer_classname = 'gov.epa.emissions.commons.io.orl.ORLMergedImporter',
exporter_classname = 'gov.epa.emissions.commons.io.orl.ORLMergedExporter'
where name = 'ORL CoST Point Inventory (PTINV)';

insert into emf.dataset_types values(DEFAULT,'Control Strategy Least Cost Curve Summary','Control Strategy Least Cost Curve Summary', '1', '1', false,'', '', 'gov.epa.emissions.commons.io.csv.CSVExporter');

-- 5/17/200 add one key word for csv file header line control
insert INTO emf.keywords VALUES (DEFAULT, 'COLUMN_TYPES');


-- 7/16/08 DCD -- updated qa steps to handle control programs.
-- Summarize by Control Measure and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select e.sector, cm.name as Measure_Name, e.cm_abbrev as Measure_Abbreviation, sg.name as Source_Group, ct.name as Control_Technology, e.POLL, case when coalesce(sum(e.Emis_Reduction),0) <> 0 then sum(e.Annual_Cost) / sum(e.Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e left outer join emf.control_measures cm on cm.abbreviation = e.cm_abbrev left outer join emf.source_groups sg on sg.id = cm.source_group left outer join emf.control_technologies ct on ct.id = cm.control_technology group by e.sector, cm.name, e.cm_abbrev, sg.name, ct.name, e.POLL order by e.sector, cm.name, POLL'
where dataset_type_id in (
	select id 
	from emf.dataset_types dt
	where name in ('Control Strategy Detailed Result')
	)
	and "name" = 'Summarize by Control Measure and Pollutant';


-- Summarize by Source Group and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select sector, sg.name as Source_Group, e.POLL, case when coalesce(sum(e.Emis_Reduction),0) <> 0 then sum(e.Annual_Cost) / sum(e.Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e left outer join emf.control_measures cm on cm.abbreviation = e.cm_abbrev left outer join emf.source_groups sg on sg.id = cm.source_group group by sector, sg.name, e.POLL order by sector, sg.name, POLL'
where dataset_type_id in (
	select id 
	from emf.dataset_types dt
	where name in ('Control Strategy Detailed Result')
	)
	and "name" = 'Summarize by Source Group and Pollutant';

-- Summarize by Control Technology and Pollutant - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select sector, ct.name as Control_Technology, e.POLL, case when coalesce(sum(e.Emis_Reduction),0) <> 0 then sum(e.Annual_Cost) / sum(e.Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e left outer join emf.control_measures cm on cm.abbreviation = e.cm_abbrev left outer join emf.control_technologies ct on ct.id = cm.control_technology group by sector, ct.name, e.POLL order by sector, ct.name, e.POLL'
where dataset_type_id in (
	select id 
	from emf.dataset_types dt
	where name in ('Control Strategy Detailed Result')
	)
	and "name" = 'Summarize by Control Technology and Pollutant';

-- Summarize by State, SCC, and Control Technology - Control Strategy Detailed Result
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select e.sector, ct.name as Control_Technology, e.POLL, e.fipsst, e.scc, case when coalesce(sum(e.Emis_Reduction),0) <> 0 then sum(e.Annual_Cost) / sum(e.Emis_Reduction) else null end as avg_cost_per_ton, sum(e.Annual_Cost) as Annual_Cost, sum(e.Final_emissions) as Final_emissions, sum(e.Emis_Reduction) as Emis_Reduction, sum(e.Inv_emissions) as Inv_emissions from $TABLE[1] e left outer join emf.control_measures cm on cm.abbreviation = e.cm_abbrev left outer join emf.control_technologies ct on ct.id = cm.control_technology group by e.sector, ct.name, e.POLL, e.fipsst, e.scc order by e.sector, ct.name, e.POLL, e.fipsst, e.scc'
where dataset_type_id in (
	select id 
	from emf.dataset_types dt
	where name in ('Control Strategy Detailed Result')
	)
	and "name" = 'Summarize by State, SCC, and Control Technology';

-- 7/18/2008 Added new table to facilitate the table solidations 
-- Table: emf.table_consolidations
CREATE TABLE emf.table_consolidations
(
  id SERIAL PRIMARY KEY,
  dataset_type_id int4 NOT NULL REFERENCES emf.dataset_types(id),
  output_table varchar(64),
  num_col int4 NOT NULL DEFAULT 0,
  col_names text,
  col_types text,
  size_limit real,
  UNIQUE(dataset_type_id, output_table)
) 
WITHOUT OIDS;
-- emf.table_consolidations

-- 7/24/2008
insert into emf.dataset_types values(DEFAULT,'Projection Packet','Projection Packet', '1', '1', false,'', 'gov.epa.emissions.commons.io.other.ProjectionPacketImporter', 'gov.epa.emissions.commons.io.other.ProjectionPacketExporter');-- emf.table_consolidations

-- DCD 7/23/2008 Fixed bug with lat and long, they were switched.
-- Summarize by Plant and Pollutant - ORL Point Inventory (PTINV)
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select fips, 
	plantid, 
	plant, 
	poll, 
	sum(ann_emis) as ann_emis, 
	sum(avd_emis) as avd_emis,  
	avg(yloc) as avg_lat, 
	avg(xloc) as avg_long, 
	max(stkhgt) as max_stkhgt, 
	max(stkdiam) as max_stkdiam, 
	max(stktemp) as max_stktemp, 
	max(stkflow) as max_stkflow, 
	max(stkvel) as max_stkvel
from $TABLE[1] e
group by fips,
	plantid,
	plant,
	poll
order by fips, 
	plantid, 
	poll'
where dataset_type_id in (
	select id 
	from emf.dataset_types dt
	where name in ('ORL Point Inventory (PTINV)')
	)
	and "name" = 'Summarize by Plant and Pollutant';

-- 8/1/2008 added two more keywords to dataset
insert INTO emf.keywords VALUES (DEFAULT, 'PREVIOUS_LOCATION');
insert INTO emf.keywords VALUES (DEFAULT, 'MASS_STORAGE_LOCATION');

-- emf.qa_programs 8/21/08 
insert into emf.qa_programs values(DEFAULT,'Compare Control Strategies','gov.epa.emissions.framework.services.qa.SQLQACompareControlStrategiesQueryRunner');


-- 8/26/08 updated relevant QA steps to include a lat and long to be used in map generation

-- Summarize by U.S. County and Pollutant with Descriptions - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select e.fips, coalesce(fips.county,''AN UNSPECIFIED COUNTY NAME'') as county, 
coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, 
e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, 
coalesce(p.name,''AN UNSPECIFIED DESCRIPTION'') as smoke_name, p.factor, 
p.voctog, p.species, 
fips.centerlon as longitude, fips.centerlat as latitude,
coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis 
from $TABLE[1] e 
left outer join reference.invtable p 
on e.POLL=p.cas 
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
and fips.country_num = ''0''
group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species, e.fips, fips.county, fips.centerlon, fips.centerlat
order by e.fips, e.POLL'
where name = 'Summarize by U.S. County and Pollutant with Descriptions'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory'));


-- Summarize by Sector, U.S. County and Pollutant with Descriptions - ORL Merged Inventory
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select e.sector, e.fips, 
coalesce(fips.county,''AN UNSPECIFIED COUNTY NAME'') as county, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, 
coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.POLL, 
coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED DESCRIPTION'') as smoke_name, 
p.factor,p.voctog, 
p.species, 
fips.centerlon as longitude, fips.centerlat as latitude,
coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis 
from $TABLE[1] e 
left outer join reference.invtable p 
on e.POLL=p.cas 
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
where fips.country_num = ''0'' 
group by e.sector, fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species, e.fips, fips.county, fips.centerlon, fips.centerlat 
order by e.sector, e.fips, e.POLL'
where name = 'Summarize by Sector, U.S. County and Pollutant with Descriptions'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Merged Inventory'));


-- Summarize by Mact Code, U.S. State and Pollutant with Descriptions - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, 
coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, coalesce(e.mact, ''AN UNSPECIFIED MACT CODE'') as mact_code, 
coalesce(m.mact_source_category, ''AN UNSPECIFIED CATEGORY NAME'') as mact_source_category, e.POLL, 
coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, 
p.factor, p.voctog, 
p.species, 
(fips.state_maxlon + fips.state_minlon) / 2 as longitude, 
(fips.state_maxlat + fips.state_minlat) / 2 as latitude, 
coalesce(sum(ann_emis), 0) as ann_emis, 
coalesce(sum(avd_emis), 0) as avd_emis 
from $TABLE[1] e 
left outer join reference.invtable p 
on e.POLL=p.cas 
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
and fips.country_num = ''0'' 
left outer join reference.mact_codes m 
on m.mact_code = e.mact 
group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species, e.mact, m.mact_source_category, fips.state_maxlon, fips.state_minlon, fips.state_maxlat, fips.state_minlat 
order by e.mact, substr(e.fips, 1, 2), e.POLL'
where name = 'Summarize by Mact Code, U.S. State and Pollutant with Descriptions'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Point Inventory (PTINV)'));


-- List Data Source Codes and U.S. State with Descriptions - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, 
coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.data_source, 
coalesce(d.description,''AN UNSPECIFIED DESCRIPTION'') as datasource_desc, 
(fips.state_maxlon + fips.state_minlon) / 2 as longitude, 
(fips.state_maxlat + fips.state_minlat) / 2 as latitude, 
count(1) as count 
from $TABLE[1] e 
	left outer join reference.datasource_codes d 
	on e.data_source=d.code 
	left outer join reference.fips 
	on fips.state_county_fips = e.FIPS 
	and fips.country_num = ''0''
group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.data_source, d.description, fips.state_maxlon, fips.state_minlon, fips.state_maxlat, fips.state_minlat
order by substr(e.fips, 1, 2), e.data_source'
where name = 'List Data Source Codes and U.S. State with Descriptions'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)'));

-- Summarize by Data Source Code, U.S. State and Pollutant with Descriptions - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, 
coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.data_source, 
coalesce(d.description,''AN UNSPECIFIED DESCRIPTION'') as datasource_desc, e.POLL, 
coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, 
(fips.state_maxlon + fips.state_minlon) / 2 as longitude, 
(fips.state_maxlat + fips.state_minlat) / 2 as latitude, 
coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis 
from $TABLE[1] e 
left outer join reference.datasource_codes d 
on e.data_source=d.code 
left outer join reference.invtable p 
on e.POLL=p.cas 
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
and fips.country_num = ''0'' 
group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.poll, e.data_source, d.description, d.description, p.descrptn, p.name, fips.state_maxlon, fips.state_minlon, fips.state_maxlat, fips.state_minlat
order by substr(e.fips, 1, 2), e.data_source'
where name = 'Summarize by Data Source Code, U.S. State and Pollutant with Descriptions'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)'));

-- Summarize by U.S. State and Pollutant with Descriptions - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, 
coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.POLL, 
coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, 
p.factor, p.voctog, 
p.species, 
(fips.state_maxlon + fips.state_minlon) / 2 as longitude, 
(fips.state_maxlat + fips.state_minlat) / 2 as latitude, 
coalesce(sum(ann_emis), 0) as ann_emis, 
coalesce(sum(avd_emis), 0) as avd_emis 
from $TABLE[1] e 
left outer join reference.invtable p 
on e.POLL=p.cas 
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
and fips.country_num = ''0'' 
group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species, fips.state_maxlon, fips.state_minlon, fips.state_maxlat, fips.state_minlat
order by substr(e.fips, 1, 2)'
where name = 'Summarize by U.S. State and Pollutant with Descriptions'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory'));

-- Summarize by Sector, U.S. State and Pollutant with Descriptions - ORL Merged Inventory
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select e.sector, substr(e.fips, 1, 2) as fipsst, 
coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, 
e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, 
coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, p.factor, 
p.voctog, p.species, 
(fips.state_maxlon + fips.state_minlon) / 2 as longitude, 
(fips.state_maxlat + fips.state_minlat) / 2 as latitude, 
coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis 
from $TABLE[1] e 
left outer join reference.invtable p 
on e.POLL=p.cas 
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
and fips.country_num = ''0'' 
group by e.sector, fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), e.POLL, p.descrptn, p.name, p.factor, p.voctog, p.species, fips.state_maxlon, fips.state_minlon, fips.state_maxlat, fips.state_minlat
order by e.sector, substr(e.fips, 1, 2)'
where name = 'Summarize by Sector, U.S. State and Pollutant with Descriptions'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Merged Inventory'));

-- Summarize by U.S. State, SCC and Pollutant with Descriptions - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, 
coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, e.SCC, 
coalesce(s.scc_description,''AN UNSPECIFIED DESCRIPTION'') as scc_description, e.POLL, 
coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, 
p.factor, p.voctog, 
p.species, 
(fips.state_maxlon + fips.state_minlon) / 2 as longitude, 
(fips.state_maxlat + fips.state_minlat) / 2 as latitude, 
coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis 
from $TABLE[1] e
left outer join reference.invtable p 
on e.POLL=p.cas 
left outer join reference.scc s 
on e.SCC=s.scc 
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
and fips.country_num = ''0'' 
group by substr(e.fips, 1, 2), fips.state_abbr, fips.state_name, e.SCC,e.POLL,p.descrptn,s.scc_description, p.name, p.factor,p.voctog, p.species, fips.state_maxlon, fips.state_minlon, fips.state_maxlat, fips.state_minlat
order by substr(e.fips, 1, 2), e.SCC, e.POLL'
where name = 'Summarize by U.S. State, SCC and Pollutant with Descriptions'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory'));

-- Summarize by Sector, U.S. State, SCC and Pollutant with Descriptions - ORL Merged Inventory
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select e.sector, substr(e.fips, 1, 2) as fipsst, 
coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, 
e.SCC, coalesce(s.scc_description,''AN UNSPECIFIED DESCRIPTION'') as scc_description, 
e.POLL, coalesce(p.descrptn,''AN UNSPECIFIED DESCRIPTION'') as pollutant_code_desc, 
coalesce(p.name,''AN UNSPECIFIED SMOKE NAME'') as smoke_name, p.factor,
p.voctog, p.species, 
(fips.state_maxlon + fips.state_minlon) / 2 as longitude, 
(fips.state_maxlat + fips.state_minlat) / 2 as latitude, 
coalesce(sum(ann_emis), 0) as ann_emis, coalesce(sum(avd_emis), 0) as avd_emis 
from $TABLE[1] e
left outer join reference.invtable p 
on e.POLL=p.cas 
left outer join reference.scc s 
on e.SCC=s.scc 
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
where fips.country_num = ''0''
group by e.sector, substr(e.fips, 1, 2), fips.state_abbr, fips.state_name, e.SCC,e.POLL,p.descrptn,s.scc_description, p.name, p.factor,p.voctog, p.species, fips.state_maxlon, fips.state_minlon, fips.state_maxlat, fips.state_minlat
order by e.sector, substr(e.fips, 1, 2), e.SCC, e.POLL'
where name = 'Summarize by Sector, U.S. State, SCC and Pollutant with Descriptions'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Merged Inventory'));

-- Summarize by U.S. State and SMOKE Pollutant Name - ORL Types
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select substr(e.fips, 1, 2) as fipsst, coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, 
coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, r.name, 
r.species, r.voctog, 
(fips.state_maxlon + fips.state_minlon) / 2 as longitude, 
(fips.state_maxlat + fips.state_minlat) / 2 as latitude, 
coalesce(sum(cast(r.factor as double precision) * ann_emis), 0) as ann_emis, coalesce(sum(cast(r.factor as double precision) * avd_emis), 0) as avd_emis 
from $TABLE[1] e
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
inner join reference.invtable r on e.poll = r.cas 
and fips.country_num = ''0'' 
group by fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), r.name, r.voctog, r.species, fips.state_maxlon, fips.state_minlon, fips.state_maxlat, fips.state_minlat
order by substr(e.fips, 1, 2),  r.species, r.voctog, r.name'
where name = 'Summarize by U.S. State and SMOKE Pollutant Name'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Nonpoint Inventory (ARINV)','ORL Nonroad Inventory (ARINV)','ORL Onroad Inventory (MBINV)','ORL Point Inventory (PTINV)','ORL Merged Inventory'));

-- Summarize by Sector, U.S. State and SMOKE Pollutant Name - ORL Merged Inventory
update emf.dataset_types_qa_step_templates 
set program_arguments = 'select e.sector, substr(e.fips, 1, 2) as fipsst, 
coalesce(fips.state_name, ''AN UNSPECIFIED STATE NAME'') as state_name, coalesce(fips.state_abbr,''AN UNSPECIFIED STATE ABBREVIATION'') as state_abbr, 
r.name, r.species, 
r.voctog, 
(fips.state_maxlon + fips.state_minlon) / 2 as longitude, 
(fips.state_maxlat + fips.state_minlat) / 2 as latitude, 
coalesce(sum(cast(r.factor as double precision) * ann_emis), 0) as ann_emis, 
coalesce(sum(cast(r.factor as double precision) * avd_emis), 0) as avd_emis 
from $TABLE[1] e
left outer join reference.fips 
on fips.state_county_fips = e.FIPS 
and fips.country_num = ''0'' 
inner join reference.invtable r 
on e.poll = r.cas 
group by e.sector, fips.state_name, fips.state_abbr, substr(e.fips, 1, 2), r.name, r.voctog, r.species, fips.state_maxlon, fips.state_minlon, fips.state_maxlat, fips.state_minlat
order by e.sector, substr(e.fips, 1, 2),  r.species, r.voctog, r.name'
where name = 'Summarize by Sector, U.S. State and SMOKE Pollutant Name'
and dataset_type_id in 
(select id 
from emf.dataset_types dt
where name in ('ORL Merged Inventory'));



-- emf.qa_programs 8/21/08 
insert into emf.qa_programs values(DEFAULT,'Compare Control Strategies','gov.epa.emissions.framework.services.qa.SQLQACompareControlStrategiesQueryRunner');



-- 9/15/08 new qa step to summarize the all control measures
-- Summarize all Control Measures - Control Strategy Detailed Result
insert into emf.dataset_types_qa_step_templates (dataset_type_id, list_index, name, qa_program_id, program_arguments, required, order_no, description)
select dt.id, (select COALESCE(max(list_index) + 1, 0) from emf.dataset_types_qa_step_templates where dataset_type_id = dt.id) as list_index, 'Summarize all Control Measures', 1, 'select cm.name as CMName, 
	cm.abbreviation as CMabbrev, 
	ct.name as control_technology, 
	s.name as sector, 
	sg.name as source_group, 
	p.name as pollutant, 
	aer.min_efficiency as min_ce, 
	aer.avg_efficiency as mean_ce, 
	aer.max_efficiency as max_ce, 
	aer.min_cost_per_ton as min_cpt, 
	aer.avg_cost_per_ton as mean_cpt, 
	aer.max_cost_per_ton as max_cpt, 
	aer.avg_rule_effectiveness as mean_re, 
	aer.avg_rule_penetration as mean_rp
from emf.control_measures cm 
	left outer join emf.control_measure_sectors cms 
	on cms.control_measure_id = cm.id 
	left outer join emf.sectors s 
	on s.id = cms.sector_id 
	left outer join emf.control_technologies ct 
	on ct.id = cm.control_technology 
	left outer join emf.source_groups sg 
	on sg.id = cm.source_group 
	left outer join emf.aggregrated_efficiencyrecords aer 
	on aer.control_measures_id = cm.id 
	left outer join emf.pollutants p 
	on p.id = aer.pollutant_id 
order by cm.name, p.name', false, 1, ''
from emf.dataset_types dt
where name in ('Control Strategy Detailed Result');


--9/15/08 rename some datset type names
update emf.dataset_types
set name = 'Strategy Measure Summary',
description = 'Strategy Measure Summary'
where name = 'Control Strategy Result Summary';
update emf.dataset_types
set name = 'Strategy County Summary',
description = 'Strategy County Summary'
where name = 'Control Strategy Result Region Summary';
update emf.dataset_types
set name = 'Strategy County Summary',
description = 'Strategy County Summary'
where name = 'Control Strategy Result Region Summary';

-- Create a relationship between rsm sectors and inventory sectors 9/12/2008
-- reference.rsm_inv_sectors
CREATE TABLE reference.rsm_inv_sectors
(
  id SERIAL PRIMARY KEY,
  rsm_sector varchar(255) NOT NULL,
  pollutant varchar(255) NOT NULL,
  inv_sector text NOT NULL
) 
WITHOUT OIDS;
-- reference.rsm_inv_sectors

-- reference.rsm_inv_sectors
insert into reference.rsm_inv_sectors values(DEFAULT, 'egu', 'NOX', 'ptipm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'egu', 'SO2', 'ptipm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'egu_negu', 'PM2_5', 'ptipm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'egu_negu', 'PM2_5', 'ptnonipm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'negu_area', 'NOX', 'ptnonipm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'negu_area', 'NOX', 'nonpt');
insert into reference.rsm_inv_sectors values(DEFAULT, 'negu_pt', 'SO2', 'ptnonipm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'mobile', 'NOX', 'onroad');
insert into reference.rsm_inv_sectors values(DEFAULT, 'mobile', 'NOX', 'nonroad');
insert into reference.rsm_inv_sectors values(DEFAULT, 'mobile', 'NOX', 'alm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'mobile', 'NH3', 'onroad');
insert into reference.rsm_inv_sectors values(DEFAULT, 'mobile', 'NH3', 'nonroad');
insert into reference.rsm_inv_sectors values(DEFAULT, 'mobile', 'NH3', 'alm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'mobile', 'PM2_5', 'onroad');
insert into reference.rsm_inv_sectors values(DEFAULT, 'mobile', 'PM2_5', 'nonroad');
insert into reference.rsm_inv_sectors values(DEFAULT, 'mobile', 'PM2_5', 'alm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'area', 'SO2', 'nonpt');
insert into reference.rsm_inv_sectors values(DEFAULT, 'area', 'SO2', 'afdust');
insert into reference.rsm_inv_sectors values(DEFAULT, 'area', 'SO2', 'ag');
insert into reference.rsm_inv_sectors values(DEFAULT, 'area', 'NH3', 'nonpt');
insert into reference.rsm_inv_sectors values(DEFAULT, 'area', 'NH3', 'afdust');
insert into reference.rsm_inv_sectors values(DEFAULT, 'area', 'NH3', 'ag');
insert into reference.rsm_inv_sectors values(DEFAULT, 'area', 'PM2_5', 'nonpt');
insert into reference.rsm_inv_sectors values(DEFAULT, 'area', 'PM2_5', 'afdust');
insert into reference.rsm_inv_sectors values(DEFAULT, 'area', 'PM2_5', 'ag');
insert into reference.rsm_inv_sectors values(DEFAULT, 'all', 'VOC', 'nonpt');
insert into reference.rsm_inv_sectors values(DEFAULT, 'all', 'VOC', 'ptnonipm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'all', 'VOC', 'ptimp');
insert into reference.rsm_inv_sectors values(DEFAULT, 'all', 'VOC', 'onroad');
insert into reference.rsm_inv_sectors values(DEFAULT, 'all', 'VOC', 'nonroad');
insert into reference.rsm_inv_sectors values(DEFAULT, 'all', 'VOC', 'alm');
insert into reference.rsm_inv_sectors values(DEFAULT, 'all', 'VOC', 'afdust');
insert into reference.rsm_inv_sectors values(DEFAULT, 'all', 'VOC', 'ag');

-- 9/23/2008 add a new strategy impact summary dataset type
insert into emf.dataset_types values(DEFAULT,'Strategy Impact Summary','Strategy Impact Summary', '1', '1', false,'', 'gov.epa.emissions.commons.io.csv.CSVImporter', 'gov.epa.emissions.commons.io.csv.CSVExporter');

2/17/2009 add new column to emf.users
ALTER TABLE emf.users ADD COLUMN is_login boolean NOT NULL DEFAULT false;

--2/25/2009 consolidate smoke report tables and csv data tables
update emf.dataset_types set table_per_dataset=0 where importer_classname='gov.epa.emissions.commons.io.other.SMKReportImporter';
update emf.dataset_types set table_per_dataset=0 where importer_classname='gov.epa.emissions.commons.io.csv.CSVImporter';