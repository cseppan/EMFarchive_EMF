-- emissions.versions
CREATE TABLE emissions.versions
(
  id serial NOT NULL,
  dataset_id int4 NOT NULL,
  version int4 NOT NULL,
  name varchar NOT NULL,
  path text NULL DEFAULT ''::text,
  final_version bool NOT NULL DEFAULT false,
  date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  lock_owner varchar(255),  
  lock_date timestamp,
  CONSTRAINT versions_pkey PRIMARY KEY (id)
) 
WITHOUT OIDS;
ALTER TABLE emissions.versions OWNER TO emf;
--emissions.versions
--
-- emf.users
CREATE TABLE emf.users
(
  id serial NOT NULL,
  user_name varchar(255) NOT NULL,
  user_pass varchar(255) NOT NULL,
  fullname varchar(255) NOT NULL,
  affiliation varchar(255) NOT NULL,
  workphone varchar(15) NOT NULL,
  emailaddr varchar(255) NOT NULL,
  inadmingrp bool NOT NULL DEFAULT false,
  acctdisabled bool NOT NULL DEFAULT false,
  lock_owner varchar(255),  
  lock_date timestamp,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_username_key UNIQUE (user_name)
) 
WITHOUT OIDS;
ALTER TABLE emf.users OWNER TO emf;
-- emf.users
--
-- emf.countries
CREATE SEQUENCE emf.countries_id_seq
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 199
  CACHE 1;
ALTER TABLE emf.countries_id_seq OWNER TO emf;
--
CREATE TABLE emf.countries
(
  id serial NOT NULL,
  name varchar(255) NOT NULL,
  CONSTRAINT countries_pk PRIMARY KEY (id),
  CONSTRAINT countries_id_key UNIQUE (id)
) 
WITHOUT OIDS;
ALTER TABLE emf.countries OWNER TO emf;
-- emf.countries
--
-- emf.sector
CREATE SEQUENCE emf.sectors_id_seq
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 199
  CACHE 1;
ALTER TABLE emf.sectors_id_seq OWNER TO emf;
--
CREATE TABLE emf.sectors
(
  id int4 NOT NULL DEFAULT nextval('emf.sectors_id_seq'::text),
  name varchar(255) NOT NULL,
  description text,
  lock_owner varchar(255),
  lock_date timestamp,
  CONSTRAINT sectors_id_key UNIQUE (id),
  CONSTRAINT sectors_pk PRIMARY KEY (id)
) 
WITHOUT OIDS;
ALTER TABLE emf.sectors OWNER TO emf;
-- emf.sector
--
-- emf.sectorcriteria
CREATE TABLE emf.sectorcriteria
(
  id serial NOT NULL,
  sector_id int4 NOT NULL,
  list_index int4,
  "type" varchar(255) NOT NULL,
  criteria text,
  CONSTRAINT sectorcriteria_pk PRIMARY KEY (id),
  CONSTRAINT sector_criteria_to_sectors FOREIGN KEY (sector_id) REFERENCES emf.sectors (id) ON UPDATE CASCADE ON DELETE CASCADE
) 
WITHOUT OIDS;
ALTER TABLE emf.sectorcriteria OWNER TO emf;
-- emf.sectorcriteria
--
--emf.statusmessages
CREATE TABLE emf.statusmessages
(
  status_id serial NOT NULL,
  user_name varchar(255) NOT NULL,
  msg_type varchar(255) NOT NULL,
  message text NOT NULL,
  msg_read bool NOT NULL DEFAULT false,
  date timestamp NOT NULL,
  CONSTRAINT statusmessages_pk PRIMARY KEY (status_id),
  CONSTRAINT statusmessages_status_id_key UNIQUE (status_id)
) 
WITHOUT OIDS;
ALTER TABLE emf.statusmessages OWNER TO emf;
--emf.statusmessages
--
--emf.properties
CREATE TABLE emf.properties
(
  prop_id serial NOT NULL,
  prop_name varchar(255) NOT NULL,
  prop_value varchar(255) NOT NULL,
  CONSTRAINT emf_properties_pk PRIMARY KEY (prop_id),
  CONSTRAINT emf_properties_prop_id_key UNIQUE (prop_id)
) 
WITHOUT OIDS;
ALTER TABLE emf.properties OWNER TO emf;
--emf.properties
--
-- emf.dataset_types
CREATE SEQUENCE emf.dataset_types_dataset_type_id_seq
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 200
  CACHE 1;
ALTER TABLE emf.dataset_types_dataset_type_id_seq OWNER TO emf;


CREATE TABLE emf.dataset_types
(
  dataset_type_id int4 NOT NULL DEFAULT nextval('emf.dataset_types_dataset_type_id_seq'::text),
  name varchar(255) NOT NULL,
  description text NOT NULL,
  minfiles int4 NOT NULL DEFAULT 1,
  maxfiles int4 NOT NULL DEFAULT 1,
  "external" bool NOT NULL DEFAULT false,
  importer_class_name varchar(255),
  exporter_class_name varchar(255),
  lock_owner varchar(255),
  lock_date timestamp,
  CONSTRAINT dataset_types_pkey PRIMARY KEY (dataset_type_id),
  CONSTRAINT dataset_types_dataset_type_id_key UNIQUE (dataset_type_id)
) 
WITHOUT OIDS;
ALTER TABLE emf.dataset_types OWNER TO emf;

-- emf.dataset_types
--
-- emf.datasets
CREATE TABLE emf.datasets
(
  dataset_id serial NOT NULL,
  name varchar(255) NOT NULL,
  creator varchar(255) NOT NULL,
  status varchar(255),
  dataset_type integer,
  units varchar(255),
  region varchar(255),
  "year" int4 NOT NULL DEFAULT 0,
  country varchar(255),
  temporal_resolution varchar(255),
  start_date_time timestamp,
  stop_date_time timestamp,
  description text,
  sector varchar(255),
  project varchar(255),
  created_date_time timestamp,
  modified_date_time timestamp,
  accessed_date_time timestamp,
  default_version int4 DEFAULT 0,
  lock_owner varchar(255),
  lock_date timestamp,
  CONSTRAINT datasets_pkey PRIMARY KEY (dataset_id),
  CONSTRAINT datasets_name_key UNIQUE (name)
) 
WITHOUT OIDS;
ALTER TABLE emf.datasets OWNER TO emf;
--
CREATE TABLE emf.dataset_access_logs
(
  access_log_id serial NOT NULL,
  dataset_id int4 REFERENCES emf.datasets (dataset_id) NOT NULL,
  username varchar(255) REFERENCES emf.users (user_name) NOT NULL,
  date timestamp NOT NULL,
  version varchar(128) NOT NULL,
  description text NOT NULL,
  "location" varchar(255) NOT NULL,
  CONSTRAINT dataset_access_logs_access_log_id_key UNIQUE (access_log_id),
  CONSTRAINT dataset_access_logs_pkey PRIMARY KEY (access_log_id),
  CONSTRAINT dataset_access_logs_to_datasets FOREIGN KEY (dataset_id)
      REFERENCES emf.datasets (dataset_id)
) 
WITHOUT OIDS;
ALTER TABLE emf.dataset_access_logs OWNER TO emf;
--emf.datasets
--
-- emf ... KEYWORDS framework
CREATE TABLE emf.emf_keywords
(
  id serial NOT NULL,
  keyword varchar(255) NOT NULL,
  CONSTRAINT emf_keywords_pkey PRIMARY KEY (id)
) 
WITHOUT OIDS;
ALTER TABLE emf.emf_keywords OWNER TO emf;
--
CREATE TABLE emf.dataset_types_keywords
(
  id serial UNIQUE NOT NULL,
  dataset_type_id int4 NOT NULL,
  list_index int4,
  keyword_id int4 NOT NULL,
  CONSTRAINT dataset_types_keywords_pkey PRIMARY KEY (id),
  CONSTRAINT dataset_types_keywords_to_datasetstypes FOREIGN KEY (dataset_type_id) REFERENCES emf.dataset_types (dataset_type_id) ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT dataset_types_keywords_to_emf_keywords FOREIGN KEY (keyword_id) REFERENCES emf.emf_keywords (id) ON UPDATE CASCADE ON DELETE CASCADE
) 
WITHOUT OIDS;
ALTER TABLE emf.dataset_types_keywords OWNER TO emf;
--
CREATE TABLE emf.datasets_keywords
(
  id serial NOT NULL,
  list_index int4,
  dataset_id int4 NOT NULL,
  keyword_id int4 NOT NULL,
  value varchar(255),
  CONSTRAINT datasets_keywords_pkey PRIMARY KEY (id),
  CONSTRAINT datasets_keywords_to_datasets FOREIGN KEY (dataset_id) REFERENCES emf.datasets (dataset_id) ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT dataset_types_keywords_to_emf_keywords FOREIGN KEY (keyword_id) REFERENCES emf.emf_keywords (id) ON UPDATE CASCADE ON DELETE CASCADE
) 
WITHOUT OIDS;
ALTER TABLE emf.datasets_keywords OWNER TO emf;
-- emf ... KEYWORDS framework
--
-- emf internal and external sources
CREATE TABLE emf.external_sources
(
  dataset_id int4 NOT NULL,
  list_index int4,
  data_source varchar(255) NOT NULL,
  CONSTRAINT dataset_tables_to_datasets FOREIGN KEY (dataset_id) REFERENCES emf.datasets (dataset_id) ON UPDATE CASCADE ON DELETE CASCADE
) 
WITHOUT OIDS;
ALTER TABLE emf.external_sources OWNER TO emf;
--
CREATE TABLE emf.internal_sources
(
  dataset_id int4 NOT NULL,
  list_index int4,
  data_source varchar(255) NOT NULL,
  table_name varchar(255) NOT NULL,
  table_type varchar(255) NOT NULL,
  table_columns text NOT NULL,
  file_size int4 NOT NULL,
  CONSTRAINT internalsources_to_datasets FOREIGN KEY (dataset_id) REFERENCES emf.datasets (dataset_id) ON UPDATE CASCADE ON DELETE CASCADE
) 
WITHOUT OIDS;
ALTER TABLE emf.internal_sources OWNER TO emf;
-- emf internal and external sources
--