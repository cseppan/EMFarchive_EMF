-- emissions.versions
CREATE TABLE emissions.versions
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL,
  version int4 NOT NULL,
  name varchar(255) NOT NULL,
  path text NULL DEFAULT ''::text,
  final_version bool NOT NULL DEFAULT false,
  date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  lock_owner varchar(255),  
  lock_date timestamp,
  UNIQUE (dataset_id, version),
  UNIQUE (dataset_id, name)
) 
WITHOUT OIDS;
--emissions.versions
--
-- emf.users
CREATE TABLE emf.users
(
  id SERIAL PRIMARY KEY,
  username varchar(255) NOT NULL UNIQUE,
  password varchar(255) NOT NULL,
  name varchar(255) NOT NULL,
  affiliation varchar(255) NOT NULL,
  phone varchar(15) NOT NULL,
  email varchar(255) NOT NULL,
  is_admin bool NOT NULL DEFAULT false,
  is_account_disabled bool NOT NULL DEFAULT false,
  lock_owner varchar(255),  
  lock_date timestamp
) 
WITHOUT OIDS;
-- emf.users
--
-- emf intended_uses
CREATE TABLE emf.intended_uses
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
-- emf intended_uses
--
-- emf projects
CREATE TABLE emf.projects
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
-- emf projects
--
-- emf.countries
CREATE TABLE emf.countries
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
-- emf.countries
--
-- emf.sector
CREATE TABLE emf.sectors
(
  id SERIAL PRIMARY KEY,
  name varchar(255) UNIQUE NOT NULL,
  description text,
  lock_owner varchar(255),
  lock_date timestamp
) 
WITHOUT OIDS;
-- emf.sector
--
-- emf regions
CREATE TABLE emf.regions
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
-- emf regions
--
-- emf.sectorcriteria
CREATE TABLE emf.sector_criteria
(
  id SERIAL PRIMARY KEY,
  sector_id int4 NOT NULL REFERENCES emf.sectors (id),
  list_index int4,
  "type" varchar(255) NOT NULL,
  criteria text
) 
WITHOUT OIDS;
-- emf.sector_criteria
--
--emf.status
CREATE TABLE emf.status
(
  id SERIAL PRIMARY KEY,
  username varchar(255) NOT NULL REFERENCES emf.users (username),
  type varchar(255) NOT NULL,
  message text NOT NULL,
  is_read bool NOT NULL DEFAULT false,
  date timestamp NOT NULL
) 
WITHOUT OIDS;
--emf.status
--
--emf.properties
CREATE TABLE emf.properties
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE,
  value varchar(255) NOT NULL
) 
WITHOUT OIDS;
--emf.properties
--
-- emf.dataset_types
CREATE TABLE emf.dataset_types
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE,
  description text NOT NULL,
  min_files int4 NOT NULL DEFAULT 1,
  max_files int4 NOT NULL DEFAULT 1,
  "external" bool NOT NULL DEFAULT false,
  importer_classname varchar(255),
  exporter_classname varchar(255),
  lock_owner varchar(255),
  lock_date timestamp
) 
WITHOUT OIDS;
-- emf.dataset_types
--
-- emf.datasets
CREATE TABLE emf.datasets
(
  id SERIAL PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE,
  creator varchar(255) NOT NULL REFERENCES emf.users (username),
  status varchar(255),
  dataset_type integer REFERENCES emf.dataset_types (id),
  units varchar(255),
  region integer REFERENCES emf.regions (id),
  intended_use integer REFERENCES emf.intended_uses (id),
  "year" int4 NOT NULL DEFAULT 0,
  country integer REFERENCES emf.countries (id),
  temporal_resolution varchar(255),
  start_date_time timestamp,
  stop_date_time timestamp,
  description text,
  project integer REFERENCES emf.projects (id),
  created_date_time timestamp,
  modified_date_time timestamp,
  accessed_date_time timestamp,
  default_version int4 DEFAULT 0,
  lock_owner varchar(255),
  lock_date timestamp
) 
WITHOUT OIDS;
--
CREATE TABLE emf.dataset_access_logs
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 REFERENCES emf.datasets (id) NOT NULL,
  username varchar(255) REFERENCES emf.users (username) NOT NULL,
  date timestamp NOT NULL,
  version varchar(255) NOT NULL,
  description text NOT NULL,
  "location" varchar(255) NOT NULL
) 
WITHOUT OIDS;
--emf.datasets
--
-- emf ... KEYWORDS framework
CREATE TABLE emf.emf_keywords
(
  id SERIAL PRIMARY KEY,
  keyword varchar(255) NOT NULL UNIQUE
) 
WITHOUT OIDS;
--
CREATE TABLE emf.dataset_types_keywords
(
  id SERIAL PRIMARY KEY,
  dataset_type_id int4 NOT NULL REFERENCES emf.dataset_types(id),
  list_index int4,
  keyword_id int4 NOT NULL REFERENCES emf.emf_keywords (id),
  UNIQUE (dataset_type_id, keyword_id)
) 
WITHOUT OIDS;
--
CREATE TABLE emf.datasets_keywords
(
  id SERIAL PRIMARY KEY,
  list_index int4,
  dataset_id int4 NOT NULL REFERENCES emf.datasets (id), 
  keyword_id int4 NOT NULL REFERENCES emf.emf_keywords (id), 
  value varchar(255),
  UNIQUE (dataset_id, keyword_id)
) 
WITHOUT OIDS;
-- emf datasets_keywords
--
-- emf internal and external sources
CREATE TABLE emf.external_sources
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL REFERENCES emf.datasets(id),
  list_index int4,
  datasource varchar(255) NOT NULL,
  UNIQUE (dataset_id, datasource)
) 
WITHOUT OIDS;
--
CREATE TABLE emf.internal_sources
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL REFERENCES emf.datasets(id),
  list_index int4,
  datasource varchar(255) NOT NULL,
  table_name varchar(255) NOT NULL UNIQUE,
  table_type varchar(255) NOT NULL,
  table_columns text NOT NULL,
  file_size int4 NOT NULL, 
  UNIQUE (dataset_id, datasource)
) 
WITHOUT OIDS;
-- emf internal and external sources
--
-- emf datasets_sectors
CREATE TABLE emf.datasets_sectors
(
  id SERIAL PRIMARY KEY,
  dataset_id int4 NOT NULL REFERENCES emf.datasets (id) ,
  list_index int4,
  sector_id int4 REFERENCES emf.sectors (id) 
) 
WITHOUT OIDS;
-- emf datasets_sectors
--