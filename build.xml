<?xml version="1.0"?>
<project name="EMF" default="all" basedir=".">

    <!--  =================== Properties ====================================== -->
    <property file="build.properties" />
    <property file="${user.home}/build.properties" />

    <property name="env" environment="env" value="env" />
    <property name="J2EE_HOME" value="${env.J2EE_HOME}" />
    <property name="JAVA_HOME" value="${env.JAVA_HOME}" />
    <property name="src.dir" value="src" />
    <property name="lib.dir" value="lib" />

    <property name="test.emf.dir" value="test/emf" />
    <property name="test.emf.unit.dir" value="${test.emf.dir}/unit" />
    <property name="test.emf.integration.dir"
              value="${test.emf.dir}/integration"
    />

    <property name="test.commons.dir" value="test/commons" />
    <property name="test.commons.unit.dir" value="${test.commons.dir}/unit" />
    <property name="test.commons.integration.dir"
              value="${test.commons.dir}/integration"
    />

    <property name="build.home" value="build/sandbox" />
    <property name="web.dir" value="web" />
    <property name="build.dist.dir" value="${build.home}/dist" />
    <property name="build.web-inf.dir" value="${build.dist.dir}/WEB-INF" />
    <property name="build.classes.dir" value="${build.web-inf.dir}/classes" />

    <property name="reports.unittests.dir"
              value="${build.home}/reports/emf-unit-tests"
    />
    <property name="reports.integrationtests.dir"
              value="${build.home}/reports/emf-integration-tests"
    />
    <property name="app.name" value="emf" />
    <property name="app.path" value="/${app.name}" />
    <property name="war-path"
              value="file:///${basedir}/${build.home}/${app.name}"
    />
    <property name="tomcat.webapps" value="${tomcat.home}/webapps" />

    <path id="classpath">
        <pathelement location="${build.classes.dir}" />
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!--  =================== Custom Tomcat Ant Tasks ====================================== -->
    <!-- To use Ant tasks to interact w/ Tomcat, copy "server/lib/catalina-ant.jar" 
        from your Tomcat installation into the "lib" directory of your Ant installation.
     
        For more information about the Manager web application, and the functionality
        of these tasks, see <http://localhost:8080/tomcat-docs/manager-howto.html>.
    -->

    <taskdef file="tomcatTasks.properties" />

    <!--  =================== Basic (Java) Targets ====================================== -->
    <target name="init">
        <mkdir dir="${build.home}" />
        <mkdir dir="${build.web-inf.dir}" />
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="${reports.unittests.dir}" />
        <mkdir dir="${reports.integrationtests.dir}" />
    </target>

    <target name="clean">
        <delete includeemptydirs="true" failonerror="no">
            <fileset dir="${build.home}" includes="**/*" />
        </delete>
    </target>

    <target name="compile-src" depends="clean, init">
        <javac srcdir="${src.dir}"
               destdir="${build.classes.dir}"
               classpathref="classpath"
               debug="on"
        />
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" includes="**/*.properties" />
            <fileset dir="${src.dir}" includes="**/*.xml" />
            <fileset dir="${src.dir}" includes="**/*.dtd" />
        </copy>
    </target>

    <target name="compile-emf-tests" depends="clean, init, compile-src">
        <javac srcdir="${test.emf.unit.dir}"
               destdir="${build.classes.dir}"
               classpathref="classpath"
               debug="on"
        />
        <javac srcdir="${test.emf.integration.dir}"
               destdir="${build.classes.dir}"
               classpathref="classpath"
               debug="on"
        />
    </target>


    <target name="compile-commons-tests" depends="clean, init, compile-src">
        <javac srcdir="${test.commons.unit.dir}"
               destdir="${build.classes.dir}"
               classpathref="classpath"
               debug="on"
        />
        <javac srcdir="${test.commons.integration.dir}"
               destdir="${build.classes.dir}"
               classpathref="classpath"
               debug="on"
        />
    </target>

    <target name="compile"
            depends="clean, init, compile-src, compile-emf-tests, compile-commons-tests"
    />

    <target name="emf-unit-tests" depends="compile">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath" />
            <formatter type="xml" />

            <batchtest fork="yes" todir="${reports.unittests.dir}">
                <fileset dir="${test.emf.unit.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="commons-unit-tests" depends="compile">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath" />
            <formatter type="xml" />

            <batchtest fork="yes" todir="${reports.unittests.dir}">
                <fileset dir="${test.commons.unit.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="emf-integration-tests"
            depends="compile, emf-local-webservices-tests, emf-remote-webservices-tests"
            description="All Integration Tests"
    />

    <target name="emf-local-webservices-tests"
            depends="compile"
            description="Integration of Client and Web Services"
    >
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath" />
            <formatter type="xml" />
            <batchtest fork="yes" todir="${reports.integrationtests.dir}">
                <fileset dir="${test.emf.integration.dir}">
                    <include name="**/emissions/framework/**/Local*Test.java" />
                    <exclude name="**/emissions/framework/**/Remote*Test.java"
                    />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="emf-remote-webservices-tests"
            depends="compile"
            description="Integration of Client and Web Services"
    >
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath" />
            <formatter type="xml" />
            <batchtest fork="yes" todir="${reports.integrationtests.dir}">
                <fileset dir="${test.emf.integration.dir}">
                    <include name="**/emissions/framework/**/Remote*Test.java"
                    />
                    <exclude name="**/emissions/framework/**/Local*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="commons-integration-tests"
            depends="compile"
            description="All Integration Tests"
    >
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath" />
            <formatter type="xml" />
            <batchtest fork="yes" todir="${reports.integrationtests.dir}">
                <fileset dir="${test.commons.integration.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="setup-emissions-data"
            depends="compile"
            description="Sets up Emissions and Reference schema"
    >
        <echo message="Setting up Emissions and Reference schema..." />
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath" />
            <formatter type="xml" />

            <test name="gov.epa.emissions.commons.io.importer.orl.ReferenceImporterTest"
                  fork="yes"
                  todir="${reports.integrationtests.dir}"
            />
            <test name="gov.epa.emissions.commons.io.importer.orl.ReferenceTablesTest"
                  fork="yes"
                  todir="${reports.integrationtests.dir}"
            />
            <test name="gov.epa.emissions.commons.io.importer.orl.ORLImporterTest"
                  fork="yes"
                  todir="${reports.integrationtests.dir}"
            />
        </junit>
        <echo message="Emissions and Reference schema setup complete." />
    </target>

    <target name="all-emf-tests"
            depends="compile, emf-unit-tests, emf-integration-tests"
    />
    <target name="all-common-tests"
            depends="compile, commons-unit-tests, commons-integration-tests"
    />
    <target name="all-tests" depends="all-emf-tests, all-common-tests" />
    <target name="all-unit-tests"
            depends="emf-unit-tests, commons-unit-tests"
    />
    <target name="all"
            depends="compile, all-emf-tests, commons-unit-tests"
            description="runs [all emf tests] + [commons unittests]"
    />

    <target name="ci-build"
            depends="compile, all-unit-tests"
            description="Continuous Integration build"
    />

    <!--  =================== CVS Targets ====================================== -->
    <target name="cvs-properties-load">
        <property file=".cvs" />
    </target>
    <target name="cvs-username-check"
            depends="cvs-properties-load"
            unless="cvs.username"
    >
        <echo message="Please create a .cvs file in your project home directory w/ the following properties:"
        />
        <echo message="username='cvs username'" />
    </target>

    <target name="cvs-update" depends="cvs-username-check" if="cvs.username">
        <cvs command="update"
             cvsroot=":pserver:${cvs.username}@cvs.sourceforge.net:/cvsroot/emisview"
             quiet="yes"
             reallyquiet="yes"
             failonerror="yes"
        />
        <echo message="EMF update is complete." />
    </target>

    <target name="pre-checkin" depends="cvs-update, compile, emf-unit-tests" />

    <!--  =================== Tomcat Deployment Targets ====================================== -->
    <target name="app-prepare" depends="clean, init, compile">
        <copy todir="${build.dist.dir}">
            <fileset dir="${web.dir}" />
        </copy>
        <copy todir="${build.web-inf.dir}/lib">
            <fileset dir="${lib.dir}">
                <exclude name="dev/**" />
                <exclude name="tomcat/**" />
            </fileset>
        </copy>
    </target>

    <target name="app-dist"
            depends="clean, init, app-prepare"
            description="Create binary distribution"
    >
        <jar jarfile="${build.home}/${app.name}.war"
             basedir="${build.dist.dir}"
        />
    </target>


    <!-- 'dynamically' installs the app in Tomcat. Will need to reinstall, 
        if Tomcat restarts. Use the 'reload' target, if you only update 
        Java classes/web.xml. Logical opposite of the 'remove' target
    
        You must run this target from the same server as Tomcat
    -->
    <target name="app-install"
            description="Install application to servlet container"
    >
        <install url="${tomcat.manager.url}"
                 username="${tomcat.manager.username}"
                 password="${tomcat.manager.password}"
                 path="${app.path}"
                 war="${war-path}"
        />
    </target>

    <target name="apps-list" description="List installed applications ">
        <list url="${tomcat.manager.url}"
              username="${tomcat.manager.username}"
              password="${tomcat.manager.password}"
        />
    </target>


    <!-- Signals Tomcat to reload the app. Could be used when application context is 
        not reloadable, and the classes/property/lib files are updated.

        NOTE: If web.xml has changed, use stop & start.
    -->
    <target name="app-reload"
            description="Reload application on servlet container"
    >
        <reload url="${tomcat.manager.url}"
                username="${tomcat.manager.username}"
                password="${tomcat.manager.password}"
                path="${app.path}"
        />
    </target>

    <target name="app-deploy"
            description="Reload application on servlet container"
    >
        <deploy url="${tomcat.manager.url}"
                username="${tomcat.manager.username}"
                password="${tomcat.manager.password}"
                path="${app.path}"
                war="${war-path}"
        />
    </target>

    <target name="simple-deploy"
            depends="app-dist"
            description="Removes (if present) an existing installation and copies the new War to Tomcat webapps folder"
    >
        <delete file="${tomcat.webapps}/${app.name}.war" />
        <delete dir="${tomcat.webapps}/${app.name}" />
        <delete dir="${tomcat.home}/work/Standalone/localhost/emf" />
        <copy todir="${tomcat.webapps}" file="${build.home}/${app.name}.war" />
    </target>

    <!-- 'dynamically' removes the app from Tomcat. Restart negates this effect ?? -->
    <target name="app-remove"
            description="Remove application on servlet container"
    >
        <remove url="${tomcat.manager.url}"
                username="${tomcat.manager.username}"
                password="${tomcat.manager.password}"
                path="${app.path}"
        />
    </target>
</project>

